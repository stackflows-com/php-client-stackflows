<?php
/**
 * UserTaskType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Stackflows\Clients\Stackflows
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stackflows REST API
 *
 * Pagination query params are as follows: page[size]=10&page[number]=1
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Stackflows\Clients\Stackflows\Model;

use \ArrayAccess;
use \Stackflows\Clients\Stackflows\ObjectSerializer;

/**
 * UserTaskType Class Doc Comment
 *
 * @category Class
 * @package  Stackflows\Clients\Stackflows
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserTaskType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserTaskType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'processInstanceReference' => 'string',
        'reference' => 'string',
        'subject' => 'string',
        'description' => 'string',
        'followUpAt' => 'object',
        'dueAt' => 'object',
        'attributes' => 'array<string,\Stackflows\Clients\Stackflows\Model\DataPointType>',
        'fields' => 'array<string,\Stackflows\Clients\Stackflows\Model\DataPointType>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'processInstanceReference' => null,
        'reference' => null,
        'subject' => null,
        'description' => null,
        'followUpAt' => null,
        'dueAt' => null,
        'attributes' => null,
        'fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'processInstanceReference' => 'processInstanceReference',
        'reference' => 'reference',
        'subject' => 'subject',
        'description' => 'description',
        'followUpAt' => 'followUpAt',
        'dueAt' => 'dueAt',
        'attributes' => 'attributes',
        'fields' => 'fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'processInstanceReference' => 'setProcessInstanceReference',
        'reference' => 'setReference',
        'subject' => 'setSubject',
        'description' => 'setDescription',
        'followUpAt' => 'setFollowUpAt',
        'dueAt' => 'setDueAt',
        'attributes' => 'setAttributes',
        'fields' => 'setFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'processInstanceReference' => 'getProcessInstanceReference',
        'reference' => 'getReference',
        'subject' => 'getSubject',
        'description' => 'getDescription',
        'followUpAt' => 'getFollowUpAt',
        'dueAt' => 'getDueAt',
        'attributes' => 'getAttributes',
        'fields' => 'getFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['processInstanceReference'] = $data['processInstanceReference'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['subject'] = $data['subject'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['followUpAt'] = $data['followUpAt'] ?? null;
        $this->container['dueAt'] = $data['dueAt'] ?? null;
        $this->container['attributes'] = $data['attributes'] ?? null;
        $this->container['fields'] = $data['fields'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets processInstanceReference
     *
     * @return string|null
     */
    public function getProcessInstanceReference()
    {
        return $this->container['processInstanceReference'];
    }

    /**
     * Sets processInstanceReference
     *
     * @param string|null $processInstanceReference processInstanceReference
     *
     * @return self
     */
    public function setProcessInstanceReference($processInstanceReference)
    {
        $this->container['processInstanceReference'] = $processInstanceReference;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets followUpAt
     *
     * @return object|null
     */
    public function getFollowUpAt()
    {
        return $this->container['followUpAt'];
    }

    /**
     * Sets followUpAt
     *
     * @param object|null $followUpAt followUpAt
     *
     * @return self
     */
    public function setFollowUpAt($followUpAt)
    {
        $this->container['followUpAt'] = $followUpAt;

        return $this;
    }

    /**
     * Gets dueAt
     *
     * @return object|null
     */
    public function getDueAt()
    {
        return $this->container['dueAt'];
    }

    /**
     * Sets dueAt
     *
     * @param object|null $dueAt dueAt
     *
     * @return self
     */
    public function setDueAt($dueAt)
    {
        $this->container['dueAt'] = $dueAt;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return array<string,\Stackflows\Clients\Stackflows\Model\DataPointType>|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param array<string,\Stackflows\Clients\Stackflows\Model\DataPointType>|null $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return array<string,\Stackflows\Clients\Stackflows\Model\DataPointType>|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param array<string,\Stackflows\Clients\Stackflows\Model\DataPointType>|null $fields fields
     *
     * @return self
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


