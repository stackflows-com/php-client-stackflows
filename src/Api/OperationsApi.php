<?php
/**
 * OperationsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Stackflows\Clients\Stackflows
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stackflows REST API
 *
 * Pagination query params are as follows: page[size]=10&page[number]=1
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Stackflows\Clients\Stackflows\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Stackflows\Clients\Stackflows\ApiException;
use Stackflows\Clients\Stackflows\Configuration;
use Stackflows\Clients\Stackflows\HeaderSelector;
use Stackflows\Clients\Stackflows\ObjectSerializer;

/**
 * OperationsApi Class Doc Comment
 *
 * @category Class
 * @package  Stackflows\Clients\Stackflows
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OperationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteBusinessModelDiagrams
     *
     * Delete Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramResponse
     */
    public function deleteBusinessModelDiagrams($diagramId)
    {
        list($response) = $this->deleteBusinessModelDiagramsWithHttpInfo($diagramId);
        return $response;
    }

    /**
     * Operation deleteBusinessModelDiagramsWithHttpInfo
     *
     * Delete Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBusinessModelDiagramsWithHttpInfo($diagramId)
    {
        $request = $this->deleteBusinessModelDiagramsRequest($diagramId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBusinessModelDiagramsAsync
     *
     * Delete Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBusinessModelDiagramsAsync($diagramId)
    {
        return $this->deleteBusinessModelDiagramsAsyncWithHttpInfo($diagramId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBusinessModelDiagramsAsyncWithHttpInfo
     *
     * Delete Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBusinessModelDiagramsAsyncWithHttpInfo($diagramId)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramResponse';
        $request = $this->deleteBusinessModelDiagramsRequest($diagramId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBusinessModelDiagrams'
     *
     * @param  string $diagramId The ID of the diagram. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBusinessModelDiagramsRequest($diagramId)
    {
        // verify the required parameter 'diagramId' is set
        if ($diagramId === null || (is_array($diagramId) && count($diagramId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diagramId when calling deleteBusinessModelDiagrams'
            );
        }

        $resourcePath = '/api/v2/business-model-diagrams/{diagram_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($diagramId !== null) {
            $resourcePath = str_replace(
                '{' . 'diagram_id' . '}',
                ObjectSerializer::toPathValue($diagramId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBusinessModelDiagramsComments
     *
     * Delete Business Model Diagram Comment
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  int $commentId The ID of the comment. (required)
     * @param  string $diagram The ID of an diagram. (required)
     * @param  string $comment The ID of an comment. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramCommentResponse
     */
    public function deleteBusinessModelDiagramsComments($diagramId, $commentId, $diagram, $comment)
    {
        list($response) = $this->deleteBusinessModelDiagramsCommentsWithHttpInfo($diagramId, $commentId, $diagram, $comment);
        return $response;
    }

    /**
     * Operation deleteBusinessModelDiagramsCommentsWithHttpInfo
     *
     * Delete Business Model Diagram Comment
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  int $commentId The ID of the comment. (required)
     * @param  string $diagram The ID of an diagram. (required)
     * @param  string $comment The ID of an comment. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramCommentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBusinessModelDiagramsCommentsWithHttpInfo($diagramId, $commentId, $diagram, $comment)
    {
        $request = $this->deleteBusinessModelDiagramsCommentsRequest($diagramId, $commentId, $diagram, $comment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramCommentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramCommentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramCommentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramCommentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramCommentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBusinessModelDiagramsCommentsAsync
     *
     * Delete Business Model Diagram Comment
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  int $commentId The ID of the comment. (required)
     * @param  string $diagram The ID of an diagram. (required)
     * @param  string $comment The ID of an comment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBusinessModelDiagramsCommentsAsync($diagramId, $commentId, $diagram, $comment)
    {
        return $this->deleteBusinessModelDiagramsCommentsAsyncWithHttpInfo($diagramId, $commentId, $diagram, $comment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBusinessModelDiagramsCommentsAsyncWithHttpInfo
     *
     * Delete Business Model Diagram Comment
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  int $commentId The ID of the comment. (required)
     * @param  string $diagram The ID of an diagram. (required)
     * @param  string $comment The ID of an comment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBusinessModelDiagramsCommentsAsyncWithHttpInfo($diagramId, $commentId, $diagram, $comment)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramCommentResponse';
        $request = $this->deleteBusinessModelDiagramsCommentsRequest($diagramId, $commentId, $diagram, $comment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBusinessModelDiagramsComments'
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  int $commentId The ID of the comment. (required)
     * @param  string $diagram The ID of an diagram. (required)
     * @param  string $comment The ID of an comment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBusinessModelDiagramsCommentsRequest($diagramId, $commentId, $diagram, $comment)
    {
        // verify the required parameter 'diagramId' is set
        if ($diagramId === null || (is_array($diagramId) && count($diagramId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diagramId when calling deleteBusinessModelDiagramsComments'
            );
        }
        // verify the required parameter 'commentId' is set
        if ($commentId === null || (is_array($commentId) && count($commentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commentId when calling deleteBusinessModelDiagramsComments'
            );
        }
        // verify the required parameter 'diagram' is set
        if ($diagram === null || (is_array($diagram) && count($diagram) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diagram when calling deleteBusinessModelDiagramsComments'
            );
        }
        // verify the required parameter 'comment' is set
        if ($comment === null || (is_array($comment) && count($comment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $comment when calling deleteBusinessModelDiagramsComments'
            );
        }

        $resourcePath = '/api/v2/business-model-diagrams/{diagram_id}/comments/{comment_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($diagramId !== null) {
            $resourcePath = str_replace(
                '{' . 'diagram_id' . '}',
                ObjectSerializer::toPathValue($diagramId),
                $resourcePath
            );
        }
        // path params
        if ($commentId !== null) {
            $resourcePath = str_replace(
                '{' . 'comment_id' . '}',
                ObjectSerializer::toPathValue($commentId),
                $resourcePath
            );
        }
        // path params
        if ($diagram !== null) {
            $resourcePath = str_replace(
                '{' . 'diagram' . '}',
                ObjectSerializer::toPathValue($diagram),
                $resourcePath
            );
        }
        // path params
        if ($comment !== null) {
            $resourcePath = str_replace(
                '{' . 'comment' . '}',
                ObjectSerializer::toPathValue($comment),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBusinessModelExceptions
     *
     * Delete Business Model Exception
     *
     * @param  string $exceptionId The ID of the exception. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelExceptionResponse
     */
    public function deleteBusinessModelExceptions($exceptionId)
    {
        list($response) = $this->deleteBusinessModelExceptionsWithHttpInfo($exceptionId);
        return $response;
    }

    /**
     * Operation deleteBusinessModelExceptionsWithHttpInfo
     *
     * Delete Business Model Exception
     *
     * @param  string $exceptionId The ID of the exception. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBusinessModelExceptionsWithHttpInfo($exceptionId)
    {
        $request = $this->deleteBusinessModelExceptionsRequest($exceptionId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelExceptionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBusinessModelExceptionsAsync
     *
     * Delete Business Model Exception
     *
     * @param  string $exceptionId The ID of the exception. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBusinessModelExceptionsAsync($exceptionId)
    {
        return $this->deleteBusinessModelExceptionsAsyncWithHttpInfo($exceptionId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBusinessModelExceptionsAsyncWithHttpInfo
     *
     * Delete Business Model Exception
     *
     * @param  string $exceptionId The ID of the exception. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBusinessModelExceptionsAsyncWithHttpInfo($exceptionId)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelExceptionResponse';
        $request = $this->deleteBusinessModelExceptionsRequest($exceptionId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBusinessModelExceptions'
     *
     * @param  string $exceptionId The ID of the exception. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBusinessModelExceptionsRequest($exceptionId)
    {
        // verify the required parameter 'exceptionId' is set
        if ($exceptionId === null || (is_array($exceptionId) && count($exceptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exceptionId when calling deleteBusinessModelExceptions'
            );
        }

        $resourcePath = '/api/v2/business-model-exceptions/{exception_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($exceptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'exception_id' . '}',
                ObjectSerializer::toPathValue($exceptionId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBusinessModels
     *
     * Delete Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelResponse
     */
    public function deleteBusinessModels($modelId)
    {
        list($response) = $this->deleteBusinessModelsWithHttpInfo($modelId);
        return $response;
    }

    /**
     * Operation deleteBusinessModelsWithHttpInfo
     *
     * Delete Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBusinessModelsWithHttpInfo($modelId)
    {
        $request = $this->deleteBusinessModelsRequest($modelId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBusinessModelsAsync
     *
     * Delete Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBusinessModelsAsync($modelId)
    {
        return $this->deleteBusinessModelsAsyncWithHttpInfo($modelId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBusinessModelsAsyncWithHttpInfo
     *
     * Delete Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBusinessModelsAsyncWithHttpInfo($modelId)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelResponse';
        $request = $this->deleteBusinessModelsRequest($modelId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBusinessModels'
     *
     * @param  string $modelId The ID of the model. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBusinessModelsRequest($modelId)
    {
        // verify the required parameter 'modelId' is set
        if ($modelId === null || (is_array($modelId) && count($modelId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modelId when calling deleteBusinessModels'
            );
        }

        $resourcePath = '/api/v2/business-models/{model_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($modelId !== null) {
            $resourcePath = str_replace(
                '{' . 'model_id' . '}',
                ObjectSerializer::toPathValue($modelId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBusinessModelsDeleteBulk
     *
     * Delete Business Models
     *
     * @param  \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelsDeleteBulkRequest $deleteBusinessModelsDeleteBulkRequest deleteBusinessModelsDeleteBulkRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelsResponse
     */
    public function deleteBusinessModelsDeleteBulk($deleteBusinessModelsDeleteBulkRequest = null)
    {
        list($response) = $this->deleteBusinessModelsDeleteBulkWithHttpInfo($deleteBusinessModelsDeleteBulkRequest);
        return $response;
    }

    /**
     * Operation deleteBusinessModelsDeleteBulkWithHttpInfo
     *
     * Delete Business Models
     *
     * @param  \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelsDeleteBulkRequest $deleteBusinessModelsDeleteBulkRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBusinessModelsDeleteBulkWithHttpInfo($deleteBusinessModelsDeleteBulkRequest = null)
    {
        $request = $this->deleteBusinessModelsDeleteBulkRequest($deleteBusinessModelsDeleteBulkRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBusinessModelsDeleteBulkAsync
     *
     * Delete Business Models
     *
     * @param  \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelsDeleteBulkRequest $deleteBusinessModelsDeleteBulkRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBusinessModelsDeleteBulkAsync($deleteBusinessModelsDeleteBulkRequest = null)
    {
        return $this->deleteBusinessModelsDeleteBulkAsyncWithHttpInfo($deleteBusinessModelsDeleteBulkRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBusinessModelsDeleteBulkAsyncWithHttpInfo
     *
     * Delete Business Models
     *
     * @param  \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelsDeleteBulkRequest $deleteBusinessModelsDeleteBulkRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBusinessModelsDeleteBulkAsyncWithHttpInfo($deleteBusinessModelsDeleteBulkRequest = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelsResponse';
        $request = $this->deleteBusinessModelsDeleteBulkRequest($deleteBusinessModelsDeleteBulkRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBusinessModelsDeleteBulk'
     *
     * @param  \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelsDeleteBulkRequest $deleteBusinessModelsDeleteBulkRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBusinessModelsDeleteBulkRequest($deleteBusinessModelsDeleteBulkRequest = null)
    {

        $resourcePath = '/api/v2/business-models';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($deleteBusinessModelsDeleteBulkRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($deleteBusinessModelsDeleteBulkRequest));
            } else {
                $httpBody = $deleteBusinessModelsDeleteBulkRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBusinessProcesses
     *
     * Delete Business Process Tag
     *
     * @param  int $tagId The ID of the tag. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessTagResponse
     */
    public function deleteBusinessProcesses($tagId)
    {
        list($response) = $this->deleteBusinessProcessesWithHttpInfo($tagId);
        return $response;
    }

    /**
     * Operation deleteBusinessProcessesWithHttpInfo
     *
     * Delete Business Process Tag
     *
     * @param  int $tagId The ID of the tag. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessTagResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBusinessProcessesWithHttpInfo($tagId)
    {
        $request = $this->deleteBusinessProcessesRequest($tagId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessTagResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessTagResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessTagResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessTagResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessTagResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBusinessProcessesAsync
     *
     * Delete Business Process Tag
     *
     * @param  int $tagId The ID of the tag. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBusinessProcessesAsync($tagId)
    {
        return $this->deleteBusinessProcessesAsyncWithHttpInfo($tagId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBusinessProcessesAsyncWithHttpInfo
     *
     * Delete Business Process Tag
     *
     * @param  int $tagId The ID of the tag. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBusinessProcessesAsyncWithHttpInfo($tagId)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessTagResponse';
        $request = $this->deleteBusinessProcessesRequest($tagId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBusinessProcesses'
     *
     * @param  int $tagId The ID of the tag. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBusinessProcessesRequest($tagId)
    {
        // verify the required parameter 'tagId' is set
        if ($tagId === null || (is_array($tagId) && count($tagId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tagId when calling deleteBusinessProcesses'
            );
        }

        $resourcePath = '/api/v2/business-processes/{tag_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tagId !== null) {
            $resourcePath = str_replace(
                '{' . 'tag_id' . '}',
                ObjectSerializer::toPathValue($tagId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBusinessProcessesDeleteBulk
     *
     * Delete Business Process Tags
     *
     * @param  \Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessesDeleteBulkRequest $deleteBusinessProcessesDeleteBulkRequest deleteBusinessProcessesDeleteBulkRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessTagsResponse
     */
    public function deleteBusinessProcessesDeleteBulk($deleteBusinessProcessesDeleteBulkRequest = null)
    {
        list($response) = $this->deleteBusinessProcessesDeleteBulkWithHttpInfo($deleteBusinessProcessesDeleteBulkRequest);
        return $response;
    }

    /**
     * Operation deleteBusinessProcessesDeleteBulkWithHttpInfo
     *
     * Delete Business Process Tags
     *
     * @param  \Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessesDeleteBulkRequest $deleteBusinessProcessesDeleteBulkRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessTagsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBusinessProcessesDeleteBulkWithHttpInfo($deleteBusinessProcessesDeleteBulkRequest = null)
    {
        $request = $this->deleteBusinessProcessesDeleteBulkRequest($deleteBusinessProcessesDeleteBulkRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessTagsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessTagsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessTagsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessTagsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessTagsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBusinessProcessesDeleteBulkAsync
     *
     * Delete Business Process Tags
     *
     * @param  \Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessesDeleteBulkRequest $deleteBusinessProcessesDeleteBulkRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBusinessProcessesDeleteBulkAsync($deleteBusinessProcessesDeleteBulkRequest = null)
    {
        return $this->deleteBusinessProcessesDeleteBulkAsyncWithHttpInfo($deleteBusinessProcessesDeleteBulkRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBusinessProcessesDeleteBulkAsyncWithHttpInfo
     *
     * Delete Business Process Tags
     *
     * @param  \Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessesDeleteBulkRequest $deleteBusinessProcessesDeleteBulkRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBusinessProcessesDeleteBulkAsyncWithHttpInfo($deleteBusinessProcessesDeleteBulkRequest = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessTagsResponse';
        $request = $this->deleteBusinessProcessesDeleteBulkRequest($deleteBusinessProcessesDeleteBulkRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBusinessProcessesDeleteBulk'
     *
     * @param  \Stackflows\Clients\Stackflows\Model\DeleteBusinessProcessesDeleteBulkRequest $deleteBusinessProcessesDeleteBulkRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBusinessProcessesDeleteBulkRequest($deleteBusinessProcessesDeleteBulkRequest = null)
    {

        $resourcePath = '/api/v2/business-processes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($deleteBusinessProcessesDeleteBulkRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($deleteBusinessProcessesDeleteBulkRequest));
            } else {
                $httpBody = $deleteBusinessProcessesDeleteBulkRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCategories
     *
     * Delete Category
     *
     * @param  int $categoryId The ID of the category. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\DeleteCategoryResponse
     */
    public function deleteCategories($categoryId)
    {
        list($response) = $this->deleteCategoriesWithHttpInfo($categoryId);
        return $response;
    }

    /**
     * Operation deleteCategoriesWithHttpInfo
     *
     * Delete Category
     *
     * @param  int $categoryId The ID of the category. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\DeleteCategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCategoriesWithHttpInfo($categoryId)
    {
        $request = $this->deleteCategoriesRequest($categoryId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\DeleteCategoryResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\DeleteCategoryResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\DeleteCategoryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteCategoryResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\DeleteCategoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCategoriesAsync
     *
     * Delete Category
     *
     * @param  int $categoryId The ID of the category. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCategoriesAsync($categoryId)
    {
        return $this->deleteCategoriesAsyncWithHttpInfo($categoryId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCategoriesAsyncWithHttpInfo
     *
     * Delete Category
     *
     * @param  int $categoryId The ID of the category. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCategoriesAsyncWithHttpInfo($categoryId)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteCategoryResponse';
        $request = $this->deleteCategoriesRequest($categoryId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCategories'
     *
     * @param  int $categoryId The ID of the category. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCategoriesRequest($categoryId)
    {
        // verify the required parameter 'categoryId' is set
        if ($categoryId === null || (is_array($categoryId) && count($categoryId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $categoryId when calling deleteCategories'
            );
        }

        $resourcePath = '/api/v2/categories/{category_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($categoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'category_id' . '}',
                ObjectSerializer::toPathValue($categoryId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTags
     *
     * Delete Tag
     *
     * @param  int $tagId The ID of the tag. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\DeleteTagResponse
     */
    public function deleteTags($tagId)
    {
        list($response) = $this->deleteTagsWithHttpInfo($tagId);
        return $response;
    }

    /**
     * Operation deleteTagsWithHttpInfo
     *
     * Delete Tag
     *
     * @param  int $tagId The ID of the tag. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\DeleteTagResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTagsWithHttpInfo($tagId)
    {
        $request = $this->deleteTagsRequest($tagId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\DeleteTagResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\DeleteTagResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\DeleteTagResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteTagResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\DeleteTagResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTagsAsync
     *
     * Delete Tag
     *
     * @param  int $tagId The ID of the tag. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTagsAsync($tagId)
    {
        return $this->deleteTagsAsyncWithHttpInfo($tagId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTagsAsyncWithHttpInfo
     *
     * Delete Tag
     *
     * @param  int $tagId The ID of the tag. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTagsAsyncWithHttpInfo($tagId)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteTagResponse';
        $request = $this->deleteTagsRequest($tagId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTags'
     *
     * @param  int $tagId The ID of the tag. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteTagsRequest($tagId)
    {
        // verify the required parameter 'tagId' is set
        if ($tagId === null || (is_array($tagId) && count($tagId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tagId when calling deleteTags'
            );
        }

        $resourcePath = '/api/v2/tags/{tag_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tagId !== null) {
            $resourcePath = str_replace(
                '{' . 'tag_id' . '}',
                ObjectSerializer::toPathValue($tagId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTasks
     *
     * Delete Task
     *
     * @param  string $taskId The ID of the task. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\DeleteTaskResponse
     */
    public function deleteTasks($taskId)
    {
        list($response) = $this->deleteTasksWithHttpInfo($taskId);
        return $response;
    }

    /**
     * Operation deleteTasksWithHttpInfo
     *
     * Delete Task
     *
     * @param  string $taskId The ID of the task. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\DeleteTaskResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTasksWithHttpInfo($taskId)
    {
        $request = $this->deleteTasksRequest($taskId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\DeleteTaskResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\DeleteTaskResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\DeleteTaskResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteTaskResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\DeleteTaskResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTasksAsync
     *
     * Delete Task
     *
     * @param  string $taskId The ID of the task. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTasksAsync($taskId)
    {
        return $this->deleteTasksAsyncWithHttpInfo($taskId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTasksAsyncWithHttpInfo
     *
     * Delete Task
     *
     * @param  string $taskId The ID of the task. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTasksAsyncWithHttpInfo($taskId)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteTaskResponse';
        $request = $this->deleteTasksRequest($taskId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTasks'
     *
     * @param  string $taskId The ID of the task. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteTasksRequest($taskId)
    {
        // verify the required parameter 'taskId' is set
        if ($taskId === null || (is_array($taskId) && count($taskId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $taskId when calling deleteTasks'
            );
        }

        $resourcePath = '/api/v2/tasks/{task_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($taskId !== null) {
            $resourcePath = str_replace(
                '{' . 'task_id' . '}',
                ObjectSerializer::toPathValue($taskId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBusinessModelDiagramsCommentsList
     *
     * List Business Model Diagram Comments
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramCommentsResponse
     */
    public function getBusinessModelDiagramsCommentsList($diagramId, $include = null)
    {
        list($response) = $this->getBusinessModelDiagramsCommentsListWithHttpInfo($diagramId, $include);
        return $response;
    }

    /**
     * Operation getBusinessModelDiagramsCommentsListWithHttpInfo
     *
     * List Business Model Diagram Comments
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramCommentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBusinessModelDiagramsCommentsListWithHttpInfo($diagramId, $include = null)
    {
        $request = $this->getBusinessModelDiagramsCommentsListRequest($diagramId, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramCommentsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramCommentsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramCommentsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramCommentsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramCommentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBusinessModelDiagramsCommentsListAsync
     *
     * List Business Model Diagram Comments
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelDiagramsCommentsListAsync($diagramId, $include = null)
    {
        return $this->getBusinessModelDiagramsCommentsListAsyncWithHttpInfo($diagramId, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBusinessModelDiagramsCommentsListAsyncWithHttpInfo
     *
     * List Business Model Diagram Comments
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelDiagramsCommentsListAsyncWithHttpInfo($diagramId, $include = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramCommentsResponse';
        $request = $this->getBusinessModelDiagramsCommentsListRequest($diagramId, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBusinessModelDiagramsCommentsList'
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBusinessModelDiagramsCommentsListRequest($diagramId, $include = null)
    {
        // verify the required parameter 'diagramId' is set
        if ($diagramId === null || (is_array($diagramId) && count($diagramId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diagramId when calling getBusinessModelDiagramsCommentsList'
            );
        }

        $resourcePath = '/api/v2/business-model-diagrams/{diagram_id}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($diagramId !== null) {
            $resourcePath = str_replace(
                '{' . 'diagram_id' . '}',
                ObjectSerializer::toPathValue($diagramId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBusinessModelDiagramsList
     *
     * List Business Model Diagram
     *
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramResponse
     */
    public function getBusinessModelDiagramsList()
    {
        list($response) = $this->getBusinessModelDiagramsListWithHttpInfo();
        return $response;
    }

    /**
     * Operation getBusinessModelDiagramsListWithHttpInfo
     *
     * List Business Model Diagram
     *
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBusinessModelDiagramsListWithHttpInfo()
    {
        $request = $this->getBusinessModelDiagramsListRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBusinessModelDiagramsListAsync
     *
     * List Business Model Diagram
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelDiagramsListAsync()
    {
        return $this->getBusinessModelDiagramsListAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBusinessModelDiagramsListAsyncWithHttpInfo
     *
     * List Business Model Diagram
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelDiagramsListAsyncWithHttpInfo()
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramResponse';
        $request = $this->getBusinessModelDiagramsListRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBusinessModelDiagramsList'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBusinessModelDiagramsListRequest()
    {

        $resourcePath = '/api/v2/business-model-diagrams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBusinessModelDiagramsShow
     *
     * View Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $includesnapshotsdeploysdeploysStatistics Possible includes (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse1
     */
    public function getBusinessModelDiagramsShow($diagramId, $includesnapshotsdeploysdeploysStatistics = null)
    {
        list($response) = $this->getBusinessModelDiagramsShowWithHttpInfo($diagramId, $includesnapshotsdeploysdeploysStatistics);
        return $response;
    }

    /**
     * Operation getBusinessModelDiagramsShowWithHttpInfo
     *
     * View Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $includesnapshotsdeploysdeploysStatistics Possible includes (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse1, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBusinessModelDiagramsShowWithHttpInfo($diagramId, $includesnapshotsdeploysdeploysStatistics = null)
    {
        $request = $this->getBusinessModelDiagramsShowRequest($diagramId, $includesnapshotsdeploysdeploysStatistics);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBusinessModelDiagramsShowAsync
     *
     * View Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $includesnapshotsdeploysdeploysStatistics Possible includes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelDiagramsShowAsync($diagramId, $includesnapshotsdeploysdeploysStatistics = null)
    {
        return $this->getBusinessModelDiagramsShowAsyncWithHttpInfo($diagramId, $includesnapshotsdeploysdeploysStatistics)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBusinessModelDiagramsShowAsyncWithHttpInfo
     *
     * View Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $includesnapshotsdeploysdeploysStatistics Possible includes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelDiagramsShowAsyncWithHttpInfo($diagramId, $includesnapshotsdeploysdeploysStatistics = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse1';
        $request = $this->getBusinessModelDiagramsShowRequest($diagramId, $includesnapshotsdeploysdeploysStatistics);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBusinessModelDiagramsShow'
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $includesnapshotsdeploysdeploysStatistics Possible includes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBusinessModelDiagramsShowRequest($diagramId, $includesnapshotsdeploysdeploysStatistics = null)
    {
        // verify the required parameter 'diagramId' is set
        if ($diagramId === null || (is_array($diagramId) && count($diagramId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diagramId when calling getBusinessModelDiagramsShow'
            );
        }

        $resourcePath = '/api/v2/business-model-diagrams/{diagram_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includesnapshotsdeploysdeploysStatistics,
            'include&#x3D;snapshots,deploys,deploys.statistics', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($diagramId !== null) {
            $resourcePath = str_replace(
                '{' . 'diagram_id' . '}',
                ObjectSerializer::toPathValue($diagramId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBusinessModelExceptionsList
     *
     * List Business Model Exceptions
     *
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ListBusinessModelExceptionsResponse
     */
    public function getBusinessModelExceptionsList()
    {
        list($response) = $this->getBusinessModelExceptionsListWithHttpInfo();
        return $response;
    }

    /**
     * Operation getBusinessModelExceptionsListWithHttpInfo
     *
     * List Business Model Exceptions
     *
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ListBusinessModelExceptionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBusinessModelExceptionsListWithHttpInfo()
    {
        $request = $this->getBusinessModelExceptionsListRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelExceptionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelExceptionsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ListBusinessModelExceptionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelExceptionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ListBusinessModelExceptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBusinessModelExceptionsListAsync
     *
     * List Business Model Exceptions
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelExceptionsListAsync()
    {
        return $this->getBusinessModelExceptionsListAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBusinessModelExceptionsListAsyncWithHttpInfo
     *
     * List Business Model Exceptions
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelExceptionsListAsyncWithHttpInfo()
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelExceptionsResponse';
        $request = $this->getBusinessModelExceptionsListRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBusinessModelExceptionsList'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBusinessModelExceptionsListRequest()
    {

        $resourcePath = '/api/v2/business-model-exceptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBusinessModelExceptionsShow
     *
     * View Business Model Exception
     *
     * @param  string $exceptionId The ID of the exception. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ViewBusinessModelExceptionResponse
     */
    public function getBusinessModelExceptionsShow($exceptionId)
    {
        list($response) = $this->getBusinessModelExceptionsShowWithHttpInfo($exceptionId);
        return $response;
    }

    /**
     * Operation getBusinessModelExceptionsShowWithHttpInfo
     *
     * View Business Model Exception
     *
     * @param  string $exceptionId The ID of the exception. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ViewBusinessModelExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBusinessModelExceptionsShowWithHttpInfo($exceptionId)
    {
        $request = $this->getBusinessModelExceptionsShowRequest($exceptionId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ViewBusinessModelExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ViewBusinessModelExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelExceptionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBusinessModelExceptionsShowAsync
     *
     * View Business Model Exception
     *
     * @param  string $exceptionId The ID of the exception. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelExceptionsShowAsync($exceptionId)
    {
        return $this->getBusinessModelExceptionsShowAsyncWithHttpInfo($exceptionId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBusinessModelExceptionsShowAsyncWithHttpInfo
     *
     * View Business Model Exception
     *
     * @param  string $exceptionId The ID of the exception. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelExceptionsShowAsyncWithHttpInfo($exceptionId)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelExceptionResponse';
        $request = $this->getBusinessModelExceptionsShowRequest($exceptionId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBusinessModelExceptionsShow'
     *
     * @param  string $exceptionId The ID of the exception. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBusinessModelExceptionsShowRequest($exceptionId)
    {
        // verify the required parameter 'exceptionId' is set
        if ($exceptionId === null || (is_array($exceptionId) && count($exceptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exceptionId when calling getBusinessModelExceptionsShow'
            );
        }

        $resourcePath = '/api/v2/business-model-exceptions/{exception_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($exceptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'exception_id' . '}',
                ObjectSerializer::toPathValue($exceptionId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBusinessModelPublicationsList
     *
     * List Business Model Publications
     *
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ListBusinessModelPublicationsResponse
     */
    public function getBusinessModelPublicationsList()
    {
        list($response) = $this->getBusinessModelPublicationsListWithHttpInfo();
        return $response;
    }

    /**
     * Operation getBusinessModelPublicationsListWithHttpInfo
     *
     * List Business Model Publications
     *
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ListBusinessModelPublicationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBusinessModelPublicationsListWithHttpInfo()
    {
        $request = $this->getBusinessModelPublicationsListRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelPublicationsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelPublicationsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ListBusinessModelPublicationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelPublicationsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ListBusinessModelPublicationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBusinessModelPublicationsListAsync
     *
     * List Business Model Publications
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelPublicationsListAsync()
    {
        return $this->getBusinessModelPublicationsListAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBusinessModelPublicationsListAsyncWithHttpInfo
     *
     * List Business Model Publications
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelPublicationsListAsyncWithHttpInfo()
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelPublicationsResponse';
        $request = $this->getBusinessModelPublicationsListRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBusinessModelPublicationsList'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBusinessModelPublicationsListRequest()
    {

        $resourcePath = '/api/v2/business-model-publications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBusinessModelPublicationsShow
     *
     * View Business Model Publication
     *
     * @param  string $publicationId The ID of the publication. (required)
     * @param  string $appendstatisticsoutliers Possible appends (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ViewBusinessModelPublicationResponse
     */
    public function getBusinessModelPublicationsShow($publicationId, $appendstatisticsoutliers = null)
    {
        list($response) = $this->getBusinessModelPublicationsShowWithHttpInfo($publicationId, $appendstatisticsoutliers);
        return $response;
    }

    /**
     * Operation getBusinessModelPublicationsShowWithHttpInfo
     *
     * View Business Model Publication
     *
     * @param  string $publicationId The ID of the publication. (required)
     * @param  string $appendstatisticsoutliers Possible appends (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ViewBusinessModelPublicationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBusinessModelPublicationsShowWithHttpInfo($publicationId, $appendstatisticsoutliers = null)
    {
        $request = $this->getBusinessModelPublicationsShowRequest($publicationId, $appendstatisticsoutliers);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ViewBusinessModelPublicationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ViewBusinessModelPublicationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelPublicationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelPublicationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelPublicationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBusinessModelPublicationsShowAsync
     *
     * View Business Model Publication
     *
     * @param  string $publicationId The ID of the publication. (required)
     * @param  string $appendstatisticsoutliers Possible appends (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelPublicationsShowAsync($publicationId, $appendstatisticsoutliers = null)
    {
        return $this->getBusinessModelPublicationsShowAsyncWithHttpInfo($publicationId, $appendstatisticsoutliers)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBusinessModelPublicationsShowAsyncWithHttpInfo
     *
     * View Business Model Publication
     *
     * @param  string $publicationId The ID of the publication. (required)
     * @param  string $appendstatisticsoutliers Possible appends (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelPublicationsShowAsyncWithHttpInfo($publicationId, $appendstatisticsoutliers = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelPublicationResponse';
        $request = $this->getBusinessModelPublicationsShowRequest($publicationId, $appendstatisticsoutliers);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBusinessModelPublicationsShow'
     *
     * @param  string $publicationId The ID of the publication. (required)
     * @param  string $appendstatisticsoutliers Possible appends (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBusinessModelPublicationsShowRequest($publicationId, $appendstatisticsoutliers = null)
    {
        // verify the required parameter 'publicationId' is set
        if ($publicationId === null || (is_array($publicationId) && count($publicationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publicationId when calling getBusinessModelPublicationsShow'
            );
        }

        $resourcePath = '/api/v2/business-model-publications/{publication_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $appendstatisticsoutliers,
            'append&#x3D;statistics,outliers', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($publicationId !== null) {
            $resourcePath = str_replace(
                '{' . 'publication_id' . '}',
                ObjectSerializer::toPathValue($publicationId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBusinessModelsCommentsList
     *
     * List Business Model Comments
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ListBusinessModelCommentsResponse
     */
    public function getBusinessModelsCommentsList($modelId, $include = null)
    {
        list($response) = $this->getBusinessModelsCommentsListWithHttpInfo($modelId, $include);
        return $response;
    }

    /**
     * Operation getBusinessModelsCommentsListWithHttpInfo
     *
     * List Business Model Comments
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ListBusinessModelCommentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBusinessModelsCommentsListWithHttpInfo($modelId, $include = null)
    {
        $request = $this->getBusinessModelsCommentsListRequest($modelId, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelCommentsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelCommentsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ListBusinessModelCommentsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelCommentsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ListBusinessModelCommentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBusinessModelsCommentsListAsync
     *
     * List Business Model Comments
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelsCommentsListAsync($modelId, $include = null)
    {
        return $this->getBusinessModelsCommentsListAsyncWithHttpInfo($modelId, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBusinessModelsCommentsListAsyncWithHttpInfo
     *
     * List Business Model Comments
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelsCommentsListAsyncWithHttpInfo($modelId, $include = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelCommentsResponse';
        $request = $this->getBusinessModelsCommentsListRequest($modelId, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBusinessModelsCommentsList'
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBusinessModelsCommentsListRequest($modelId, $include = null)
    {
        // verify the required parameter 'modelId' is set
        if ($modelId === null || (is_array($modelId) && count($modelId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modelId when calling getBusinessModelsCommentsList'
            );
        }

        $resourcePath = '/api/v2/business-models/{model_id}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($modelId !== null) {
            $resourcePath = str_replace(
                '{' . 'model_id' . '}',
                ObjectSerializer::toPathValue($modelId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBusinessModelsList
     *
     * List Business Models
     *
     * @param  string $include Possible includes. (optional)
     * @param  string $filterWithAnyTags Will return models that has any of specified tags. (optional)
     * @param  bool $filterWithoutAnyTags Will return list of all models that has no tags at all. (optional)
     * @param  string $filterAutocomplete Retrieve list that has \&quot;tes\&quot; at the start of their name. (optional)
     * @param  string $filterSearch Retrieve list that has \&quot;tes\&quot; in their name. (optional)
     * @param  string $filterCategories Filter by specific categories. (optional)
     * @param  string $filterType Filter by specific type. Example process,decision (optional)
     * @param  bool $filterUncategorized boolean List only uncategorized process models. (optional)
     * @param  bool $filterSubscribable List only subscribable process models. (optional)
     * @param  string $sort Sorting by specified criteria. (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ListBusinessModelsResponse
     */
    public function getBusinessModelsList($include = null, $filterWithAnyTags = null, $filterWithoutAnyTags = null, $filterAutocomplete = null, $filterSearch = null, $filterCategories = null, $filterType = null, $filterUncategorized = null, $filterSubscribable = null, $sort = null)
    {
        list($response) = $this->getBusinessModelsListWithHttpInfo($include, $filterWithAnyTags, $filterWithoutAnyTags, $filterAutocomplete, $filterSearch, $filterCategories, $filterType, $filterUncategorized, $filterSubscribable, $sort);
        return $response;
    }

    /**
     * Operation getBusinessModelsListWithHttpInfo
     *
     * List Business Models
     *
     * @param  string $include Possible includes. (optional)
     * @param  string $filterWithAnyTags Will return models that has any of specified tags. (optional)
     * @param  bool $filterWithoutAnyTags Will return list of all models that has no tags at all. (optional)
     * @param  string $filterAutocomplete Retrieve list that has \&quot;tes\&quot; at the start of their name. (optional)
     * @param  string $filterSearch Retrieve list that has \&quot;tes\&quot; in their name. (optional)
     * @param  string $filterCategories Filter by specific categories. (optional)
     * @param  string $filterType Filter by specific type. Example process,decision (optional)
     * @param  bool $filterUncategorized boolean List only uncategorized process models. (optional)
     * @param  bool $filterSubscribable List only subscribable process models. (optional)
     * @param  string $sort Sorting by specified criteria. (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ListBusinessModelsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBusinessModelsListWithHttpInfo($include = null, $filterWithAnyTags = null, $filterWithoutAnyTags = null, $filterAutocomplete = null, $filterSearch = null, $filterCategories = null, $filterType = null, $filterUncategorized = null, $filterSubscribable = null, $sort = null)
    {
        $request = $this->getBusinessModelsListRequest($include, $filterWithAnyTags, $filterWithoutAnyTags, $filterAutocomplete, $filterSearch, $filterCategories, $filterType, $filterUncategorized, $filterSubscribable, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ListBusinessModelsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ListBusinessModelsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBusinessModelsListAsync
     *
     * List Business Models
     *
     * @param  string $include Possible includes. (optional)
     * @param  string $filterWithAnyTags Will return models that has any of specified tags. (optional)
     * @param  bool $filterWithoutAnyTags Will return list of all models that has no tags at all. (optional)
     * @param  string $filterAutocomplete Retrieve list that has \&quot;tes\&quot; at the start of their name. (optional)
     * @param  string $filterSearch Retrieve list that has \&quot;tes\&quot; in their name. (optional)
     * @param  string $filterCategories Filter by specific categories. (optional)
     * @param  string $filterType Filter by specific type. Example process,decision (optional)
     * @param  bool $filterUncategorized boolean List only uncategorized process models. (optional)
     * @param  bool $filterSubscribable List only subscribable process models. (optional)
     * @param  string $sort Sorting by specified criteria. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelsListAsync($include = null, $filterWithAnyTags = null, $filterWithoutAnyTags = null, $filterAutocomplete = null, $filterSearch = null, $filterCategories = null, $filterType = null, $filterUncategorized = null, $filterSubscribable = null, $sort = null)
    {
        return $this->getBusinessModelsListAsyncWithHttpInfo($include, $filterWithAnyTags, $filterWithoutAnyTags, $filterAutocomplete, $filterSearch, $filterCategories, $filterType, $filterUncategorized, $filterSubscribable, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBusinessModelsListAsyncWithHttpInfo
     *
     * List Business Models
     *
     * @param  string $include Possible includes. (optional)
     * @param  string $filterWithAnyTags Will return models that has any of specified tags. (optional)
     * @param  bool $filterWithoutAnyTags Will return list of all models that has no tags at all. (optional)
     * @param  string $filterAutocomplete Retrieve list that has \&quot;tes\&quot; at the start of their name. (optional)
     * @param  string $filterSearch Retrieve list that has \&quot;tes\&quot; in their name. (optional)
     * @param  string $filterCategories Filter by specific categories. (optional)
     * @param  string $filterType Filter by specific type. Example process,decision (optional)
     * @param  bool $filterUncategorized boolean List only uncategorized process models. (optional)
     * @param  bool $filterSubscribable List only subscribable process models. (optional)
     * @param  string $sort Sorting by specified criteria. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelsListAsyncWithHttpInfo($include = null, $filterWithAnyTags = null, $filterWithoutAnyTags = null, $filterAutocomplete = null, $filterSearch = null, $filterCategories = null, $filterType = null, $filterUncategorized = null, $filterSubscribable = null, $sort = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelsResponse';
        $request = $this->getBusinessModelsListRequest($include, $filterWithAnyTags, $filterWithoutAnyTags, $filterAutocomplete, $filterSearch, $filterCategories, $filterType, $filterUncategorized, $filterSubscribable, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBusinessModelsList'
     *
     * @param  string $include Possible includes. (optional)
     * @param  string $filterWithAnyTags Will return models that has any of specified tags. (optional)
     * @param  bool $filterWithoutAnyTags Will return list of all models that has no tags at all. (optional)
     * @param  string $filterAutocomplete Retrieve list that has \&quot;tes\&quot; at the start of their name. (optional)
     * @param  string $filterSearch Retrieve list that has \&quot;tes\&quot; in their name. (optional)
     * @param  string $filterCategories Filter by specific categories. (optional)
     * @param  string $filterType Filter by specific type. Example process,decision (optional)
     * @param  bool $filterUncategorized boolean List only uncategorized process models. (optional)
     * @param  bool $filterSubscribable List only subscribable process models. (optional)
     * @param  string $sort Sorting by specified criteria. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBusinessModelsListRequest($include = null, $filterWithAnyTags = null, $filterWithoutAnyTags = null, $filterAutocomplete = null, $filterSearch = null, $filterCategories = null, $filterType = null, $filterUncategorized = null, $filterSubscribable = null, $sort = null)
    {

        $resourcePath = '/api/v2/business-models';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterWithAnyTags,
            'filter[with-any-tags]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterWithoutAnyTags,
            'filter[without-any-tags]', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterAutocomplete,
            'filter[autocomplete]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterSearch,
            'filter[search]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterCategories,
            'filter[categories]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterType,
            'filter[type]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterUncategorized,
            'filter[uncategorized]', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterSubscribable,
            'filter[subscribable]', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBusinessModelsShow
     *
     * View Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $includeownercompanycategorytagscommentsCounttagsCountdiagrams Possible includes (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ViewBusinessModelResponse
     */
    public function getBusinessModelsShow($modelId, $includeownercompanycategorytagscommentsCounttagsCountdiagrams = null)
    {
        list($response) = $this->getBusinessModelsShowWithHttpInfo($modelId, $includeownercompanycategorytagscommentsCounttagsCountdiagrams);
        return $response;
    }

    /**
     * Operation getBusinessModelsShowWithHttpInfo
     *
     * View Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $includeownercompanycategorytagscommentsCounttagsCountdiagrams Possible includes (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ViewBusinessModelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBusinessModelsShowWithHttpInfo($modelId, $includeownercompanycategorytagscommentsCounttagsCountdiagrams = null)
    {
        $request = $this->getBusinessModelsShowRequest($modelId, $includeownercompanycategorytagscommentsCounttagsCountdiagrams);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ViewBusinessModelResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ViewBusinessModelResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBusinessModelsShowAsync
     *
     * View Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $includeownercompanycategorytagscommentsCounttagsCountdiagrams Possible includes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelsShowAsync($modelId, $includeownercompanycategorytagscommentsCounttagsCountdiagrams = null)
    {
        return $this->getBusinessModelsShowAsyncWithHttpInfo($modelId, $includeownercompanycategorytagscommentsCounttagsCountdiagrams)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBusinessModelsShowAsyncWithHttpInfo
     *
     * View Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $includeownercompanycategorytagscommentsCounttagsCountdiagrams Possible includes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelsShowAsyncWithHttpInfo($modelId, $includeownercompanycategorytagscommentsCounttagsCountdiagrams = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelResponse';
        $request = $this->getBusinessModelsShowRequest($modelId, $includeownercompanycategorytagscommentsCounttagsCountdiagrams);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBusinessModelsShow'
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $includeownercompanycategorytagscommentsCounttagsCountdiagrams Possible includes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBusinessModelsShowRequest($modelId, $includeownercompanycategorytagscommentsCounttagsCountdiagrams = null)
    {
        // verify the required parameter 'modelId' is set
        if ($modelId === null || (is_array($modelId) && count($modelId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modelId when calling getBusinessModelsShow'
            );
        }

        $resourcePath = '/api/v2/business-models/{model_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeownercompanycategorytagscommentsCounttagsCountdiagrams,
            'include&#x3D;owner,company,category,tags,comments-count,tags-count,diagrams', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($modelId !== null) {
            $resourcePath = str_replace(
                '{' . 'model_id' . '}',
                ObjectSerializer::toPathValue($modelId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBusinessModelsShowRevision
     *
     * View Business Model Diagram
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $revision  (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse
     */
    public function getBusinessModelsShowRevision($modelId, $revision)
    {
        list($response) = $this->getBusinessModelsShowRevisionWithHttpInfo($modelId, $revision);
        return $response;
    }

    /**
     * Operation getBusinessModelsShowRevisionWithHttpInfo
     *
     * View Business Model Diagram
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $revision  (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBusinessModelsShowRevisionWithHttpInfo($modelId, $revision)
    {
        $request = $this->getBusinessModelsShowRevisionRequest($modelId, $revision);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBusinessModelsShowRevisionAsync
     *
     * View Business Model Diagram
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $revision  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelsShowRevisionAsync($modelId, $revision)
    {
        return $this->getBusinessModelsShowRevisionAsyncWithHttpInfo($modelId, $revision)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBusinessModelsShowRevisionAsyncWithHttpInfo
     *
     * View Business Model Diagram
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $revision  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelsShowRevisionAsyncWithHttpInfo($modelId, $revision)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse';
        $request = $this->getBusinessModelsShowRevisionRequest($modelId, $revision);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBusinessModelsShowRevision'
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $revision  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBusinessModelsShowRevisionRequest($modelId, $revision)
    {
        // verify the required parameter 'modelId' is set
        if ($modelId === null || (is_array($modelId) && count($modelId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modelId when calling getBusinessModelsShowRevision'
            );
        }
        // verify the required parameter 'revision' is set
        if ($revision === null || (is_array($revision) && count($revision) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $revision when calling getBusinessModelsShowRevision'
            );
        }

        $resourcePath = '/api/v2/business-models/{model_id}/revisions/{revision}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($modelId !== null) {
            $resourcePath = str_replace(
                '{' . 'model_id' . '}',
                ObjectSerializer::toPathValue($modelId),
                $resourcePath
            );
        }
        // path params
        if ($revision !== null) {
            $resourcePath = str_replace(
                '{' . 'revision' . '}',
                ObjectSerializer::toPathValue($revision),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBusinessModelsShowRevisions
     *
     * List Business Model Diagrams
     *
     * @param  string $modelId The ID of the model. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramsResponse
     */
    public function getBusinessModelsShowRevisions($modelId)
    {
        list($response) = $this->getBusinessModelsShowRevisionsWithHttpInfo($modelId);
        return $response;
    }

    /**
     * Operation getBusinessModelsShowRevisionsWithHttpInfo
     *
     * List Business Model Diagrams
     *
     * @param  string $modelId The ID of the model. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBusinessModelsShowRevisionsWithHttpInfo($modelId)
    {
        $request = $this->getBusinessModelsShowRevisionsRequest($modelId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBusinessModelsShowRevisionsAsync
     *
     * List Business Model Diagrams
     *
     * @param  string $modelId The ID of the model. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelsShowRevisionsAsync($modelId)
    {
        return $this->getBusinessModelsShowRevisionsAsyncWithHttpInfo($modelId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBusinessModelsShowRevisionsAsyncWithHttpInfo
     *
     * List Business Model Diagrams
     *
     * @param  string $modelId The ID of the model. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessModelsShowRevisionsAsyncWithHttpInfo($modelId)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramsResponse';
        $request = $this->getBusinessModelsShowRevisionsRequest($modelId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBusinessModelsShowRevisions'
     *
     * @param  string $modelId The ID of the model. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBusinessModelsShowRevisionsRequest($modelId)
    {
        // verify the required parameter 'modelId' is set
        if ($modelId === null || (is_array($modelId) && count($modelId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modelId when calling getBusinessModelsShowRevisions'
            );
        }

        $resourcePath = '/api/v2/business-models/{model_id}/revisions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($modelId !== null) {
            $resourcePath = str_replace(
                '{' . 'model_id' . '}',
                ObjectSerializer::toPathValue($modelId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBusinessProcessesList
     *
     * List Business Process Tags
     *
     * @param  string $includeprocessModels Will add process models to the response (optional)
     * @param  int $includeprocessModelsCount Will add process models count to the response (optional)
     * @param  string $filterAutocompletetes Retrieve list that has \&quot;tes\&quot; at the start of their name (optional)
     * @param  string $filterSearchtes Retrieve list that has \&quot;tes\&quot; in their name (optional)
     * @param  string $sortnameCreatedAtUpdatedAt Sorting example (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ListBusinessProcessTagsResponse
     */
    public function getBusinessProcessesList($includeprocessModels = null, $includeprocessModelsCount = null, $filterAutocompletetes = null, $filterSearchtes = null, $sortnameCreatedAtUpdatedAt = null)
    {
        list($response) = $this->getBusinessProcessesListWithHttpInfo($includeprocessModels, $includeprocessModelsCount, $filterAutocompletetes, $filterSearchtes, $sortnameCreatedAtUpdatedAt);
        return $response;
    }

    /**
     * Operation getBusinessProcessesListWithHttpInfo
     *
     * List Business Process Tags
     *
     * @param  string $includeprocessModels Will add process models to the response (optional)
     * @param  int $includeprocessModelsCount Will add process models count to the response (optional)
     * @param  string $filterAutocompletetes Retrieve list that has \&quot;tes\&quot; at the start of their name (optional)
     * @param  string $filterSearchtes Retrieve list that has \&quot;tes\&quot; in their name (optional)
     * @param  string $sortnameCreatedAtUpdatedAt Sorting example (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ListBusinessProcessTagsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBusinessProcessesListWithHttpInfo($includeprocessModels = null, $includeprocessModelsCount = null, $filterAutocompletetes = null, $filterSearchtes = null, $sortnameCreatedAtUpdatedAt = null)
    {
        $request = $this->getBusinessProcessesListRequest($includeprocessModels, $includeprocessModelsCount, $filterAutocompletetes, $filterSearchtes, $sortnameCreatedAtUpdatedAt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ListBusinessProcessTagsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ListBusinessProcessTagsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ListBusinessProcessTagsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessProcessTagsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ListBusinessProcessTagsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBusinessProcessesListAsync
     *
     * List Business Process Tags
     *
     * @param  string $includeprocessModels Will add process models to the response (optional)
     * @param  int $includeprocessModelsCount Will add process models count to the response (optional)
     * @param  string $filterAutocompletetes Retrieve list that has \&quot;tes\&quot; at the start of their name (optional)
     * @param  string $filterSearchtes Retrieve list that has \&quot;tes\&quot; in their name (optional)
     * @param  string $sortnameCreatedAtUpdatedAt Sorting example (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessProcessesListAsync($includeprocessModels = null, $includeprocessModelsCount = null, $filterAutocompletetes = null, $filterSearchtes = null, $sortnameCreatedAtUpdatedAt = null)
    {
        return $this->getBusinessProcessesListAsyncWithHttpInfo($includeprocessModels, $includeprocessModelsCount, $filterAutocompletetes, $filterSearchtes, $sortnameCreatedAtUpdatedAt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBusinessProcessesListAsyncWithHttpInfo
     *
     * List Business Process Tags
     *
     * @param  string $includeprocessModels Will add process models to the response (optional)
     * @param  int $includeprocessModelsCount Will add process models count to the response (optional)
     * @param  string $filterAutocompletetes Retrieve list that has \&quot;tes\&quot; at the start of their name (optional)
     * @param  string $filterSearchtes Retrieve list that has \&quot;tes\&quot; in their name (optional)
     * @param  string $sortnameCreatedAtUpdatedAt Sorting example (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessProcessesListAsyncWithHttpInfo($includeprocessModels = null, $includeprocessModelsCount = null, $filterAutocompletetes = null, $filterSearchtes = null, $sortnameCreatedAtUpdatedAt = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessProcessTagsResponse';
        $request = $this->getBusinessProcessesListRequest($includeprocessModels, $includeprocessModelsCount, $filterAutocompletetes, $filterSearchtes, $sortnameCreatedAtUpdatedAt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBusinessProcessesList'
     *
     * @param  string $includeprocessModels Will add process models to the response (optional)
     * @param  int $includeprocessModelsCount Will add process models count to the response (optional)
     * @param  string $filterAutocompletetes Retrieve list that has \&quot;tes\&quot; at the start of their name (optional)
     * @param  string $filterSearchtes Retrieve list that has \&quot;tes\&quot; in their name (optional)
     * @param  string $sortnameCreatedAtUpdatedAt Sorting example (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBusinessProcessesListRequest($includeprocessModels = null, $includeprocessModelsCount = null, $filterAutocompletetes = null, $filterSearchtes = null, $sortnameCreatedAtUpdatedAt = null)
    {

        $resourcePath = '/api/v2/business-processes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeprocessModels,
            'include&#x3D;process-models', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeprocessModelsCount,
            'include&#x3D;process-models-count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterAutocompletetes,
            'filter[autocomplete]&#x3D;tes', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterSearchtes,
            'filter[search]&#x3D;tes', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sortnameCreatedAtUpdatedAt,
            'sort&#x3D;name,-created_at,-updated_at', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBusinessProcessesShow
     *
     * View Business Process Tag
     *
     * @param  int $tagId The ID of the tag. (required)
     * @param  string $includeprocessModels Will add process models to the response (optional)
     * @param  int $includeprocessModelsCount Will add process models count to the response (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ViewBusinessProcessTagResponse
     */
    public function getBusinessProcessesShow($tagId, $includeprocessModels = null, $includeprocessModelsCount = null)
    {
        list($response) = $this->getBusinessProcessesShowWithHttpInfo($tagId, $includeprocessModels, $includeprocessModelsCount);
        return $response;
    }

    /**
     * Operation getBusinessProcessesShowWithHttpInfo
     *
     * View Business Process Tag
     *
     * @param  int $tagId The ID of the tag. (required)
     * @param  string $includeprocessModels Will add process models to the response (optional)
     * @param  int $includeprocessModelsCount Will add process models count to the response (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ViewBusinessProcessTagResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBusinessProcessesShowWithHttpInfo($tagId, $includeprocessModels = null, $includeprocessModelsCount = null)
    {
        $request = $this->getBusinessProcessesShowRequest($tagId, $includeprocessModels, $includeprocessModelsCount);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ViewBusinessProcessTagResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ViewBusinessProcessTagResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ViewBusinessProcessTagResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ViewBusinessProcessTagResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ViewBusinessProcessTagResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBusinessProcessesShowAsync
     *
     * View Business Process Tag
     *
     * @param  int $tagId The ID of the tag. (required)
     * @param  string $includeprocessModels Will add process models to the response (optional)
     * @param  int $includeprocessModelsCount Will add process models count to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessProcessesShowAsync($tagId, $includeprocessModels = null, $includeprocessModelsCount = null)
    {
        return $this->getBusinessProcessesShowAsyncWithHttpInfo($tagId, $includeprocessModels, $includeprocessModelsCount)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBusinessProcessesShowAsyncWithHttpInfo
     *
     * View Business Process Tag
     *
     * @param  int $tagId The ID of the tag. (required)
     * @param  string $includeprocessModels Will add process models to the response (optional)
     * @param  int $includeprocessModelsCount Will add process models count to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessProcessesShowAsyncWithHttpInfo($tagId, $includeprocessModels = null, $includeprocessModelsCount = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ViewBusinessProcessTagResponse';
        $request = $this->getBusinessProcessesShowRequest($tagId, $includeprocessModels, $includeprocessModelsCount);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBusinessProcessesShow'
     *
     * @param  int $tagId The ID of the tag. (required)
     * @param  string $includeprocessModels Will add process models to the response (optional)
     * @param  int $includeprocessModelsCount Will add process models count to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBusinessProcessesShowRequest($tagId, $includeprocessModels = null, $includeprocessModelsCount = null)
    {
        // verify the required parameter 'tagId' is set
        if ($tagId === null || (is_array($tagId) && count($tagId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tagId when calling getBusinessProcessesShow'
            );
        }

        $resourcePath = '/api/v2/business-processes/{tag_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeprocessModels,
            'include&#x3D;process-models', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeprocessModelsCount,
            'include&#x3D;process-models-count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($tagId !== null) {
            $resourcePath = str_replace(
                '{' . 'tag_id' . '}',
                ObjectSerializer::toPathValue($tagId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCategoriesList
     *
     * List Categories
     *
     * @param  bool $filterRoot Use combination with include&#x3D;children for full tree list. (optional)
     * @param  int $filterSiblings ID of a category which siblings should be retrieved. (optional)
     * @param  string $filterAutocomplete Autocomplete. (optional)
     * @param  string $filterSearch Search. (optional)
     * @param  string $fieldsBusinessProcessLatestDiagram Include fields from the latest release record. (optional)
     * @param  string $include Includes relations. (optional)
     * @param  string $filterSearchBusinessModels Search categories that has models based on specified keyword. (optional)
     * @param  string $sort Sort by specific field. (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ListCategoriesResponse
     */
    public function getCategoriesList($filterRoot = null, $filterSiblings = null, $filterAutocomplete = null, $filterSearch = null, $fieldsBusinessProcessLatestDiagram = null, $include = null, $filterSearchBusinessModels = null, $sort = null)
    {
        list($response) = $this->getCategoriesListWithHttpInfo($filterRoot, $filterSiblings, $filterAutocomplete, $filterSearch, $fieldsBusinessProcessLatestDiagram, $include, $filterSearchBusinessModels, $sort);
        return $response;
    }

    /**
     * Operation getCategoriesListWithHttpInfo
     *
     * List Categories
     *
     * @param  bool $filterRoot Use combination with include&#x3D;children for full tree list. (optional)
     * @param  int $filterSiblings ID of a category which siblings should be retrieved. (optional)
     * @param  string $filterAutocomplete Autocomplete. (optional)
     * @param  string $filterSearch Search. (optional)
     * @param  string $fieldsBusinessProcessLatestDiagram Include fields from the latest release record. (optional)
     * @param  string $include Includes relations. (optional)
     * @param  string $filterSearchBusinessModels Search categories that has models based on specified keyword. (optional)
     * @param  string $sort Sort by specific field. (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ListCategoriesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCategoriesListWithHttpInfo($filterRoot = null, $filterSiblings = null, $filterAutocomplete = null, $filterSearch = null, $fieldsBusinessProcessLatestDiagram = null, $include = null, $filterSearchBusinessModels = null, $sort = null)
    {
        $request = $this->getCategoriesListRequest($filterRoot, $filterSiblings, $filterAutocomplete, $filterSearch, $fieldsBusinessProcessLatestDiagram, $include, $filterSearchBusinessModels, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ListCategoriesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ListCategoriesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ListCategoriesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ListCategoriesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ListCategoriesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCategoriesListAsync
     *
     * List Categories
     *
     * @param  bool $filterRoot Use combination with include&#x3D;children for full tree list. (optional)
     * @param  int $filterSiblings ID of a category which siblings should be retrieved. (optional)
     * @param  string $filterAutocomplete Autocomplete. (optional)
     * @param  string $filterSearch Search. (optional)
     * @param  string $fieldsBusinessProcessLatestDiagram Include fields from the latest release record. (optional)
     * @param  string $include Includes relations. (optional)
     * @param  string $filterSearchBusinessModels Search categories that has models based on specified keyword. (optional)
     * @param  string $sort Sort by specific field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoriesListAsync($filterRoot = null, $filterSiblings = null, $filterAutocomplete = null, $filterSearch = null, $fieldsBusinessProcessLatestDiagram = null, $include = null, $filterSearchBusinessModels = null, $sort = null)
    {
        return $this->getCategoriesListAsyncWithHttpInfo($filterRoot, $filterSiblings, $filterAutocomplete, $filterSearch, $fieldsBusinessProcessLatestDiagram, $include, $filterSearchBusinessModels, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCategoriesListAsyncWithHttpInfo
     *
     * List Categories
     *
     * @param  bool $filterRoot Use combination with include&#x3D;children for full tree list. (optional)
     * @param  int $filterSiblings ID of a category which siblings should be retrieved. (optional)
     * @param  string $filterAutocomplete Autocomplete. (optional)
     * @param  string $filterSearch Search. (optional)
     * @param  string $fieldsBusinessProcessLatestDiagram Include fields from the latest release record. (optional)
     * @param  string $include Includes relations. (optional)
     * @param  string $filterSearchBusinessModels Search categories that has models based on specified keyword. (optional)
     * @param  string $sort Sort by specific field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoriesListAsyncWithHttpInfo($filterRoot = null, $filterSiblings = null, $filterAutocomplete = null, $filterSearch = null, $fieldsBusinessProcessLatestDiagram = null, $include = null, $filterSearchBusinessModels = null, $sort = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ListCategoriesResponse';
        $request = $this->getCategoriesListRequest($filterRoot, $filterSiblings, $filterAutocomplete, $filterSearch, $fieldsBusinessProcessLatestDiagram, $include, $filterSearchBusinessModels, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCategoriesList'
     *
     * @param  bool $filterRoot Use combination with include&#x3D;children for full tree list. (optional)
     * @param  int $filterSiblings ID of a category which siblings should be retrieved. (optional)
     * @param  string $filterAutocomplete Autocomplete. (optional)
     * @param  string $filterSearch Search. (optional)
     * @param  string $fieldsBusinessProcessLatestDiagram Include fields from the latest release record. (optional)
     * @param  string $include Includes relations. (optional)
     * @param  string $filterSearchBusinessModels Search categories that has models based on specified keyword. (optional)
     * @param  string $sort Sort by specific field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCategoriesListRequest($filterRoot = null, $filterSiblings = null, $filterAutocomplete = null, $filterSearch = null, $fieldsBusinessProcessLatestDiagram = null, $include = null, $filterSearchBusinessModels = null, $sort = null)
    {

        $resourcePath = '/api/v2/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterRoot,
            'filter[root]', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterSiblings,
            'filter[siblings]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterAutocomplete,
            'filter[autocomplete]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterSearch,
            'filter[search]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fieldsBusinessProcessLatestDiagram,
            'fields[business-process.latest-diagram]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterSearchBusinessModels,
            'filter[search-business-models]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCategoriesShow
     *
     * View Category
     *
     * @param  int $id The ID of the category. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ViewCategoryResponse
     */
    public function getCategoriesShow($id)
    {
        list($response) = $this->getCategoriesShowWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getCategoriesShowWithHttpInfo
     *
     * View Category
     *
     * @param  int $id The ID of the category. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ViewCategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCategoriesShowWithHttpInfo($id)
    {
        $request = $this->getCategoriesShowRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ViewCategoryResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ViewCategoryResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ViewCategoryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ViewCategoryResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ViewCategoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCategoriesShowAsync
     *
     * View Category
     *
     * @param  int $id The ID of the category. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoriesShowAsync($id)
    {
        return $this->getCategoriesShowAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCategoriesShowAsyncWithHttpInfo
     *
     * View Category
     *
     * @param  int $id The ID of the category. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoriesShowAsyncWithHttpInfo($id)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ViewCategoryResponse';
        $request = $this->getCategoriesShowRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCategoriesShow'
     *
     * @param  int $id The ID of the category. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCategoriesShowRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCategoriesShow'
            );
        }

        $resourcePath = '/api/v2/categories/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTagsList
     *
     * List Tags
     *
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ListTagsResponse
     */
    public function getTagsList()
    {
        list($response) = $this->getTagsListWithHttpInfo();
        return $response;
    }

    /**
     * Operation getTagsListWithHttpInfo
     *
     * List Tags
     *
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ListTagsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTagsListWithHttpInfo()
    {
        $request = $this->getTagsListRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ListTagsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ListTagsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ListTagsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ListTagsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ListTagsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTagsListAsync
     *
     * List Tags
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTagsListAsync()
    {
        return $this->getTagsListAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTagsListAsyncWithHttpInfo
     *
     * List Tags
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTagsListAsyncWithHttpInfo()
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ListTagsResponse';
        $request = $this->getTagsListRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTagsList'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTagsListRequest()
    {

        $resourcePath = '/api/v2/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTagsShow
     *
     * View Tag
     *
     * @param  int $id The ID of the tag. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ViewTagResponse
     */
    public function getTagsShow($id)
    {
        list($response) = $this->getTagsShowWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getTagsShowWithHttpInfo
     *
     * View Tag
     *
     * @param  int $id The ID of the tag. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ViewTagResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTagsShowWithHttpInfo($id)
    {
        $request = $this->getTagsShowRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ViewTagResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ViewTagResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ViewTagResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ViewTagResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ViewTagResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTagsShowAsync
     *
     * View Tag
     *
     * @param  int $id The ID of the tag. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTagsShowAsync($id)
    {
        return $this->getTagsShowAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTagsShowAsyncWithHttpInfo
     *
     * View Tag
     *
     * @param  int $id The ID of the tag. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTagsShowAsyncWithHttpInfo($id)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ViewTagResponse';
        $request = $this->getTagsShowRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTagsShow'
     *
     * @param  int $id The ID of the tag. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTagsShowRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTagsShow'
            );
        }

        $resourcePath = '/api/v2/tags/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTasksList
     *
     * List Tasks
     *
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ListTasksResponse
     */
    public function getTasksList()
    {
        list($response) = $this->getTasksListWithHttpInfo();
        return $response;
    }

    /**
     * Operation getTasksListWithHttpInfo
     *
     * List Tasks
     *
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ListTasksResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTasksListWithHttpInfo()
    {
        $request = $this->getTasksListRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ListTasksResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ListTasksResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ListTasksResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ListTasksResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ListTasksResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTasksListAsync
     *
     * List Tasks
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTasksListAsync()
    {
        return $this->getTasksListAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTasksListAsyncWithHttpInfo
     *
     * List Tasks
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTasksListAsyncWithHttpInfo()
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ListTasksResponse';
        $request = $this->getTasksListRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTasksList'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTasksListRequest()
    {

        $resourcePath = '/api/v2/tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTasksShow
     *
     * View Task
     *
     * @param  string $id The ID of the task. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ViewTaskResponse
     */
    public function getTasksShow($id)
    {
        list($response) = $this->getTasksShowWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getTasksShowWithHttpInfo
     *
     * View Task
     *
     * @param  string $id The ID of the task. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ViewTaskResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTasksShowWithHttpInfo($id)
    {
        $request = $this->getTasksShowRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ViewTaskResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ViewTaskResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ViewTaskResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ViewTaskResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ViewTaskResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTasksShowAsync
     *
     * View Task
     *
     * @param  string $id The ID of the task. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTasksShowAsync($id)
    {
        return $this->getTasksShowAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTasksShowAsyncWithHttpInfo
     *
     * View Task
     *
     * @param  string $id The ID of the task. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTasksShowAsyncWithHttpInfo($id)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ViewTaskResponse';
        $request = $this->getTasksShowRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTasksShow'
     *
     * @param  string $id The ID of the task. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTasksShowRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTasksShow'
            );
        }

        $resourcePath = '/api/v2/tasks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postBusinessModelDiagramsCommentsCreate
     *
     * Create Business Model Diagram Comment
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelDiagramsCommentsCreateRequest $postBusinessModelDiagramsCommentsCreateRequest postBusinessModelDiagramsCommentsCreateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramCommentResponse
     */
    public function postBusinessModelDiagramsCommentsCreate($diagramId, $postBusinessModelDiagramsCommentsCreateRequest)
    {
        list($response) = $this->postBusinessModelDiagramsCommentsCreateWithHttpInfo($diagramId, $postBusinessModelDiagramsCommentsCreateRequest);
        return $response;
    }

    /**
     * Operation postBusinessModelDiagramsCommentsCreateWithHttpInfo
     *
     * Create Business Model Diagram Comment
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelDiagramsCommentsCreateRequest $postBusinessModelDiagramsCommentsCreateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramCommentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postBusinessModelDiagramsCommentsCreateWithHttpInfo($diagramId, $postBusinessModelDiagramsCommentsCreateRequest)
    {
        $request = $this->postBusinessModelDiagramsCommentsCreateRequest($diagramId, $postBusinessModelDiagramsCommentsCreateRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramCommentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramCommentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramCommentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramCommentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramCommentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postBusinessModelDiagramsCommentsCreateAsync
     *
     * Create Business Model Diagram Comment
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelDiagramsCommentsCreateRequest $postBusinessModelDiagramsCommentsCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBusinessModelDiagramsCommentsCreateAsync($diagramId, $postBusinessModelDiagramsCommentsCreateRequest)
    {
        return $this->postBusinessModelDiagramsCommentsCreateAsyncWithHttpInfo($diagramId, $postBusinessModelDiagramsCommentsCreateRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postBusinessModelDiagramsCommentsCreateAsyncWithHttpInfo
     *
     * Create Business Model Diagram Comment
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelDiagramsCommentsCreateRequest $postBusinessModelDiagramsCommentsCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBusinessModelDiagramsCommentsCreateAsyncWithHttpInfo($diagramId, $postBusinessModelDiagramsCommentsCreateRequest)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramCommentResponse';
        $request = $this->postBusinessModelDiagramsCommentsCreateRequest($diagramId, $postBusinessModelDiagramsCommentsCreateRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postBusinessModelDiagramsCommentsCreate'
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelDiagramsCommentsCreateRequest $postBusinessModelDiagramsCommentsCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postBusinessModelDiagramsCommentsCreateRequest($diagramId, $postBusinessModelDiagramsCommentsCreateRequest)
    {
        // verify the required parameter 'diagramId' is set
        if ($diagramId === null || (is_array($diagramId) && count($diagramId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diagramId when calling postBusinessModelDiagramsCommentsCreate'
            );
        }
        // verify the required parameter 'postBusinessModelDiagramsCommentsCreateRequest' is set
        if ($postBusinessModelDiagramsCommentsCreateRequest === null || (is_array($postBusinessModelDiagramsCommentsCreateRequest) && count($postBusinessModelDiagramsCommentsCreateRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postBusinessModelDiagramsCommentsCreateRequest when calling postBusinessModelDiagramsCommentsCreate'
            );
        }

        $resourcePath = '/api/v2/business-model-diagrams/{diagram_id}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($diagramId !== null) {
            $resourcePath = str_replace(
                '{' . 'diagram_id' . '}',
                ObjectSerializer::toPathValue($diagramId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postBusinessModelDiagramsCommentsCreateRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postBusinessModelDiagramsCommentsCreateRequest));
            } else {
                $httpBody = $postBusinessModelDiagramsCommentsCreateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postBusinessModelDiagramsCreate
     *
     * Create Business Model Diagram
     *
     * @param  string $xml  (required)
     * @param  string $businessModelId  (required)
     * @param  \SplFileObject $snapshot of the process diagram (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramResponse
     */
    public function postBusinessModelDiagramsCreate($xml, $businessModelId, $snapshot = null)
    {
        list($response) = $this->postBusinessModelDiagramsCreateWithHttpInfo($xml, $businessModelId, $snapshot);
        return $response;
    }

    /**
     * Operation postBusinessModelDiagramsCreateWithHttpInfo
     *
     * Create Business Model Diagram
     *
     * @param  string $xml  (required)
     * @param  string $businessModelId  (required)
     * @param  \SplFileObject $snapshot of the process diagram (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postBusinessModelDiagramsCreateWithHttpInfo($xml, $businessModelId, $snapshot = null)
    {
        $request = $this->postBusinessModelDiagramsCreateRequest($xml, $businessModelId, $snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postBusinessModelDiagramsCreateAsync
     *
     * Create Business Model Diagram
     *
     * @param  string $xml  (required)
     * @param  string $businessModelId  (required)
     * @param  \SplFileObject $snapshot of the process diagram (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBusinessModelDiagramsCreateAsync($xml, $businessModelId, $snapshot = null)
    {
        return $this->postBusinessModelDiagramsCreateAsyncWithHttpInfo($xml, $businessModelId, $snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postBusinessModelDiagramsCreateAsyncWithHttpInfo
     *
     * Create Business Model Diagram
     *
     * @param  string $xml  (required)
     * @param  string $businessModelId  (required)
     * @param  \SplFileObject $snapshot of the process diagram (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBusinessModelDiagramsCreateAsyncWithHttpInfo($xml, $businessModelId, $snapshot = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramResponse';
        $request = $this->postBusinessModelDiagramsCreateRequest($xml, $businessModelId, $snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postBusinessModelDiagramsCreate'
     *
     * @param  string $xml  (required)
     * @param  string $businessModelId  (required)
     * @param  \SplFileObject $snapshot of the process diagram (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postBusinessModelDiagramsCreateRequest($xml, $businessModelId, $snapshot = null)
    {
        // verify the required parameter 'xml' is set
        if ($xml === null || (is_array($xml) && count($xml) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xml when calling postBusinessModelDiagramsCreate'
            );
        }
        // verify the required parameter 'businessModelId' is set
        if ($businessModelId === null || (is_array($businessModelId) && count($businessModelId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $businessModelId when calling postBusinessModelDiagramsCreate'
            );
        }

        $resourcePath = '/api/v2/business-model-diagrams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($xml !== null) {
            $formParams['xml'] = ObjectSerializer::toFormValue($xml);
        }
        // form params
        if ($businessModelId !== null) {
            $formParams['business_model_id'] = ObjectSerializer::toFormValue($businessModelId);
        }
        // form params
        if ($snapshot !== null) {
            $multipart = true;
            $formParams['snapshot'] = [];
            $paramFiles = is_array($snapshot) ? $snapshot : [$snapshot];
            foreach ($paramFiles as $paramFile) {
                $formParams['snapshot'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postBusinessModelDiagramsPublish
     *
     * Publish Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelDiagramsPublishRequest $postBusinessModelDiagramsPublishRequest postBusinessModelDiagramsPublishRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\PublishBusinessModelDiagramResponse
     */
    public function postBusinessModelDiagramsPublish($diagramId, $postBusinessModelDiagramsPublishRequest = null)
    {
        list($response) = $this->postBusinessModelDiagramsPublishWithHttpInfo($diagramId, $postBusinessModelDiagramsPublishRequest);
        return $response;
    }

    /**
     * Operation postBusinessModelDiagramsPublishWithHttpInfo
     *
     * Publish Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelDiagramsPublishRequest $postBusinessModelDiagramsPublishRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\PublishBusinessModelDiagramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postBusinessModelDiagramsPublishWithHttpInfo($diagramId, $postBusinessModelDiagramsPublishRequest = null)
    {
        $request = $this->postBusinessModelDiagramsPublishRequest($diagramId, $postBusinessModelDiagramsPublishRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\PublishBusinessModelDiagramResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\PublishBusinessModelDiagramResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\PublishBusinessModelDiagramResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\PublishBusinessModelDiagramResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\PublishBusinessModelDiagramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postBusinessModelDiagramsPublishAsync
     *
     * Publish Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelDiagramsPublishRequest $postBusinessModelDiagramsPublishRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBusinessModelDiagramsPublishAsync($diagramId, $postBusinessModelDiagramsPublishRequest = null)
    {
        return $this->postBusinessModelDiagramsPublishAsyncWithHttpInfo($diagramId, $postBusinessModelDiagramsPublishRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postBusinessModelDiagramsPublishAsyncWithHttpInfo
     *
     * Publish Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelDiagramsPublishRequest $postBusinessModelDiagramsPublishRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBusinessModelDiagramsPublishAsyncWithHttpInfo($diagramId, $postBusinessModelDiagramsPublishRequest = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\PublishBusinessModelDiagramResponse';
        $request = $this->postBusinessModelDiagramsPublishRequest($diagramId, $postBusinessModelDiagramsPublishRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postBusinessModelDiagramsPublish'
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelDiagramsPublishRequest $postBusinessModelDiagramsPublishRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postBusinessModelDiagramsPublishRequest($diagramId, $postBusinessModelDiagramsPublishRequest = null)
    {
        // verify the required parameter 'diagramId' is set
        if ($diagramId === null || (is_array($diagramId) && count($diagramId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diagramId when calling postBusinessModelDiagramsPublish'
            );
        }

        $resourcePath = '/api/v2/business-model-diagrams/{diagram_id}/publish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($diagramId !== null) {
            $resourcePath = str_replace(
                '{' . 'diagram_id' . '}',
                ObjectSerializer::toPathValue($diagramId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postBusinessModelDiagramsPublishRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postBusinessModelDiagramsPublishRequest));
            } else {
                $httpBody = $postBusinessModelDiagramsPublishRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postBusinessModelExceptionsCreate
     *
     * Create Business Model Exception
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelExceptionsCreateRequest $postBusinessModelExceptionsCreateRequest postBusinessModelExceptionsCreateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\CreateBusinessModelExceptionResponse
     */
    public function postBusinessModelExceptionsCreate($postBusinessModelExceptionsCreateRequest)
    {
        list($response) = $this->postBusinessModelExceptionsCreateWithHttpInfo($postBusinessModelExceptionsCreateRequest);
        return $response;
    }

    /**
     * Operation postBusinessModelExceptionsCreateWithHttpInfo
     *
     * Create Business Model Exception
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelExceptionsCreateRequest $postBusinessModelExceptionsCreateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\CreateBusinessModelExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postBusinessModelExceptionsCreateWithHttpInfo($postBusinessModelExceptionsCreateRequest)
    {
        $request = $this->postBusinessModelExceptionsCreateRequest($postBusinessModelExceptionsCreateRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\CreateBusinessModelExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\CreateBusinessModelExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelExceptionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postBusinessModelExceptionsCreateAsync
     *
     * Create Business Model Exception
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelExceptionsCreateRequest $postBusinessModelExceptionsCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBusinessModelExceptionsCreateAsync($postBusinessModelExceptionsCreateRequest)
    {
        return $this->postBusinessModelExceptionsCreateAsyncWithHttpInfo($postBusinessModelExceptionsCreateRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postBusinessModelExceptionsCreateAsyncWithHttpInfo
     *
     * Create Business Model Exception
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelExceptionsCreateRequest $postBusinessModelExceptionsCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBusinessModelExceptionsCreateAsyncWithHttpInfo($postBusinessModelExceptionsCreateRequest)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelExceptionResponse';
        $request = $this->postBusinessModelExceptionsCreateRequest($postBusinessModelExceptionsCreateRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postBusinessModelExceptionsCreate'
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelExceptionsCreateRequest $postBusinessModelExceptionsCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postBusinessModelExceptionsCreateRequest($postBusinessModelExceptionsCreateRequest)
    {
        // verify the required parameter 'postBusinessModelExceptionsCreateRequest' is set
        if ($postBusinessModelExceptionsCreateRequest === null || (is_array($postBusinessModelExceptionsCreateRequest) && count($postBusinessModelExceptionsCreateRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postBusinessModelExceptionsCreateRequest when calling postBusinessModelExceptionsCreate'
            );
        }

        $resourcePath = '/api/v2/business-model-exceptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postBusinessModelExceptionsCreateRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postBusinessModelExceptionsCreateRequest));
            } else {
                $httpBody = $postBusinessModelExceptionsCreateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postBusinessModelsCreate
     *
     * Create Business Model
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelsCreateRequest $postBusinessModelsCreateRequest postBusinessModelsCreateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\CreateBusinessModelResponse
     */
    public function postBusinessModelsCreate($postBusinessModelsCreateRequest)
    {
        list($response) = $this->postBusinessModelsCreateWithHttpInfo($postBusinessModelsCreateRequest);
        return $response;
    }

    /**
     * Operation postBusinessModelsCreateWithHttpInfo
     *
     * Create Business Model
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelsCreateRequest $postBusinessModelsCreateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\CreateBusinessModelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postBusinessModelsCreateWithHttpInfo($postBusinessModelsCreateRequest)
    {
        $request = $this->postBusinessModelsCreateRequest($postBusinessModelsCreateRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\CreateBusinessModelResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\CreateBusinessModelResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postBusinessModelsCreateAsync
     *
     * Create Business Model
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelsCreateRequest $postBusinessModelsCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBusinessModelsCreateAsync($postBusinessModelsCreateRequest)
    {
        return $this->postBusinessModelsCreateAsyncWithHttpInfo($postBusinessModelsCreateRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postBusinessModelsCreateAsyncWithHttpInfo
     *
     * Create Business Model
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelsCreateRequest $postBusinessModelsCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBusinessModelsCreateAsyncWithHttpInfo($postBusinessModelsCreateRequest)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelResponse';
        $request = $this->postBusinessModelsCreateRequest($postBusinessModelsCreateRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postBusinessModelsCreate'
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelsCreateRequest $postBusinessModelsCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postBusinessModelsCreateRequest($postBusinessModelsCreateRequest)
    {
        // verify the required parameter 'postBusinessModelsCreateRequest' is set
        if ($postBusinessModelsCreateRequest === null || (is_array($postBusinessModelsCreateRequest) && count($postBusinessModelsCreateRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postBusinessModelsCreateRequest when calling postBusinessModelsCreate'
            );
        }

        $resourcePath = '/api/v2/business-models';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postBusinessModelsCreateRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postBusinessModelsCreateRequest));
            } else {
                $httpBody = $postBusinessModelsCreateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postBusinessModelsPostRevision
     *
     * Submit Business Model Diagram
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $xml An xml of a diagram. (required)
     * @param  \SplFileObject $snapshot A snapshot image of a diagram (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\SubmitBusinessModelDiagramResponse
     */
    public function postBusinessModelsPostRevision($modelId, $xml, $snapshot = null)
    {
        list($response) = $this->postBusinessModelsPostRevisionWithHttpInfo($modelId, $xml, $snapshot);
        return $response;
    }

    /**
     * Operation postBusinessModelsPostRevisionWithHttpInfo
     *
     * Submit Business Model Diagram
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $xml An xml of a diagram. (required)
     * @param  \SplFileObject $snapshot A snapshot image of a diagram (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\SubmitBusinessModelDiagramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postBusinessModelsPostRevisionWithHttpInfo($modelId, $xml, $snapshot = null)
    {
        $request = $this->postBusinessModelsPostRevisionRequest($modelId, $xml, $snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\SubmitBusinessModelDiagramResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\SubmitBusinessModelDiagramResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\SubmitBusinessModelDiagramResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\SubmitBusinessModelDiagramResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\SubmitBusinessModelDiagramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postBusinessModelsPostRevisionAsync
     *
     * Submit Business Model Diagram
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $xml An xml of a diagram. (required)
     * @param  \SplFileObject $snapshot A snapshot image of a diagram (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBusinessModelsPostRevisionAsync($modelId, $xml, $snapshot = null)
    {
        return $this->postBusinessModelsPostRevisionAsyncWithHttpInfo($modelId, $xml, $snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postBusinessModelsPostRevisionAsyncWithHttpInfo
     *
     * Submit Business Model Diagram
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $xml An xml of a diagram. (required)
     * @param  \SplFileObject $snapshot A snapshot image of a diagram (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBusinessModelsPostRevisionAsyncWithHttpInfo($modelId, $xml, $snapshot = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\SubmitBusinessModelDiagramResponse';
        $request = $this->postBusinessModelsPostRevisionRequest($modelId, $xml, $snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postBusinessModelsPostRevision'
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $xml An xml of a diagram. (required)
     * @param  \SplFileObject $snapshot A snapshot image of a diagram (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postBusinessModelsPostRevisionRequest($modelId, $xml, $snapshot = null)
    {
        // verify the required parameter 'modelId' is set
        if ($modelId === null || (is_array($modelId) && count($modelId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modelId when calling postBusinessModelsPostRevision'
            );
        }
        // verify the required parameter 'xml' is set
        if ($xml === null || (is_array($xml) && count($xml) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xml when calling postBusinessModelsPostRevision'
            );
        }

        $resourcePath = '/api/v2/business-models/{model_id}/revisions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($modelId !== null) {
            $resourcePath = str_replace(
                '{' . 'model_id' . '}',
                ObjectSerializer::toPathValue($modelId),
                $resourcePath
            );
        }

        // form params
        if ($xml !== null) {
            $formParams['xml'] = ObjectSerializer::toFormValue($xml);
        }
        // form params
        if ($snapshot !== null) {
            $multipart = true;
            $formParams['snapshot'] = [];
            $paramFiles = is_array($snapshot) ? $snapshot : [$snapshot];
            foreach ($paramFiles as $paramFile) {
                $formParams['snapshot'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postBusinessModelsTag
     *
     * Tag Business Model
     *
     * @param  string $taggableId The ID of the taggable. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelsTagRequest $postBusinessModelsTagRequest postBusinessModelsTagRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\TagBusinessModelResponse
     */
    public function postBusinessModelsTag($taggableId, $postBusinessModelsTagRequest = null)
    {
        list($response) = $this->postBusinessModelsTagWithHttpInfo($taggableId, $postBusinessModelsTagRequest);
        return $response;
    }

    /**
     * Operation postBusinessModelsTagWithHttpInfo
     *
     * Tag Business Model
     *
     * @param  string $taggableId The ID of the taggable. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelsTagRequest $postBusinessModelsTagRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\TagBusinessModelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postBusinessModelsTagWithHttpInfo($taggableId, $postBusinessModelsTagRequest = null)
    {
        $request = $this->postBusinessModelsTagRequest($taggableId, $postBusinessModelsTagRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\TagBusinessModelResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\TagBusinessModelResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\TagBusinessModelResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\TagBusinessModelResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\TagBusinessModelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postBusinessModelsTagAsync
     *
     * Tag Business Model
     *
     * @param  string $taggableId The ID of the taggable. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelsTagRequest $postBusinessModelsTagRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBusinessModelsTagAsync($taggableId, $postBusinessModelsTagRequest = null)
    {
        return $this->postBusinessModelsTagAsyncWithHttpInfo($taggableId, $postBusinessModelsTagRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postBusinessModelsTagAsyncWithHttpInfo
     *
     * Tag Business Model
     *
     * @param  string $taggableId The ID of the taggable. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelsTagRequest $postBusinessModelsTagRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBusinessModelsTagAsyncWithHttpInfo($taggableId, $postBusinessModelsTagRequest = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\TagBusinessModelResponse';
        $request = $this->postBusinessModelsTagRequest($taggableId, $postBusinessModelsTagRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postBusinessModelsTag'
     *
     * @param  string $taggableId The ID of the taggable. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelsTagRequest $postBusinessModelsTagRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postBusinessModelsTagRequest($taggableId, $postBusinessModelsTagRequest = null)
    {
        // verify the required parameter 'taggableId' is set
        if ($taggableId === null || (is_array($taggableId) && count($taggableId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $taggableId when calling postBusinessModelsTag'
            );
        }

        $resourcePath = '/api/v2/business-models/{taggable_id}/tag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($taggableId !== null) {
            $resourcePath = str_replace(
                '{' . 'taggable_id' . '}',
                ObjectSerializer::toPathValue($taggableId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postBusinessModelsTagRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postBusinessModelsTagRequest));
            } else {
                $httpBody = $postBusinessModelsTagRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postBusinessProcessesCreate
     *
     * Create Business Process Tag
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessProcessesCreateRequest $postBusinessProcessesCreateRequest postBusinessProcessesCreateRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\CreateBusinessProcessTagResponse
     */
    public function postBusinessProcessesCreate($postBusinessProcessesCreateRequest = null)
    {
        list($response) = $this->postBusinessProcessesCreateWithHttpInfo($postBusinessProcessesCreateRequest);
        return $response;
    }

    /**
     * Operation postBusinessProcessesCreateWithHttpInfo
     *
     * Create Business Process Tag
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessProcessesCreateRequest $postBusinessProcessesCreateRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\CreateBusinessProcessTagResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postBusinessProcessesCreateWithHttpInfo($postBusinessProcessesCreateRequest = null)
    {
        $request = $this->postBusinessProcessesCreateRequest($postBusinessProcessesCreateRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\CreateBusinessProcessTagResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\CreateBusinessProcessTagResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\CreateBusinessProcessTagResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\CreateBusinessProcessTagResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\CreateBusinessProcessTagResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postBusinessProcessesCreateAsync
     *
     * Create Business Process Tag
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessProcessesCreateRequest $postBusinessProcessesCreateRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBusinessProcessesCreateAsync($postBusinessProcessesCreateRequest = null)
    {
        return $this->postBusinessProcessesCreateAsyncWithHttpInfo($postBusinessProcessesCreateRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postBusinessProcessesCreateAsyncWithHttpInfo
     *
     * Create Business Process Tag
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessProcessesCreateRequest $postBusinessProcessesCreateRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBusinessProcessesCreateAsyncWithHttpInfo($postBusinessProcessesCreateRequest = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\CreateBusinessProcessTagResponse';
        $request = $this->postBusinessProcessesCreateRequest($postBusinessProcessesCreateRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postBusinessProcessesCreate'
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessProcessesCreateRequest $postBusinessProcessesCreateRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postBusinessProcessesCreateRequest($postBusinessProcessesCreateRequest = null)
    {

        $resourcePath = '/api/v2/business-processes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postBusinessProcessesCreateRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postBusinessProcessesCreateRequest));
            } else {
                $httpBody = $postBusinessProcessesCreateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCategoriesCreate
     *
     * Create Category
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostCategoriesCreateRequest $postCategoriesCreateRequest postCategoriesCreateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\CreateCategoryResponse
     */
    public function postCategoriesCreate($postCategoriesCreateRequest)
    {
        list($response) = $this->postCategoriesCreateWithHttpInfo($postCategoriesCreateRequest);
        return $response;
    }

    /**
     * Operation postCategoriesCreateWithHttpInfo
     *
     * Create Category
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostCategoriesCreateRequest $postCategoriesCreateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\CreateCategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCategoriesCreateWithHttpInfo($postCategoriesCreateRequest)
    {
        $request = $this->postCategoriesCreateRequest($postCategoriesCreateRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\CreateCategoryResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\CreateCategoryResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\CreateCategoryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\CreateCategoryResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\CreateCategoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCategoriesCreateAsync
     *
     * Create Category
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostCategoriesCreateRequest $postCategoriesCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCategoriesCreateAsync($postCategoriesCreateRequest)
    {
        return $this->postCategoriesCreateAsyncWithHttpInfo($postCategoriesCreateRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCategoriesCreateAsyncWithHttpInfo
     *
     * Create Category
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostCategoriesCreateRequest $postCategoriesCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCategoriesCreateAsyncWithHttpInfo($postCategoriesCreateRequest)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\CreateCategoryResponse';
        $request = $this->postCategoriesCreateRequest($postCategoriesCreateRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCategoriesCreate'
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostCategoriesCreateRequest $postCategoriesCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCategoriesCreateRequest($postCategoriesCreateRequest)
    {
        // verify the required parameter 'postCategoriesCreateRequest' is set
        if ($postCategoriesCreateRequest === null || (is_array($postCategoriesCreateRequest) && count($postCategoriesCreateRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postCategoriesCreateRequest when calling postCategoriesCreate'
            );
        }

        $resourcePath = '/api/v2/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postCategoriesCreateRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postCategoriesCreateRequest));
            } else {
                $httpBody = $postCategoriesCreateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postTagsCreate
     *
     * Create Tag
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostTagsCreateRequest $postTagsCreateRequest postTagsCreateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\CreateTagResponse
     */
    public function postTagsCreate($postTagsCreateRequest)
    {
        list($response) = $this->postTagsCreateWithHttpInfo($postTagsCreateRequest);
        return $response;
    }

    /**
     * Operation postTagsCreateWithHttpInfo
     *
     * Create Tag
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostTagsCreateRequest $postTagsCreateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\CreateTagResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postTagsCreateWithHttpInfo($postTagsCreateRequest)
    {
        $request = $this->postTagsCreateRequest($postTagsCreateRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\CreateTagResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\CreateTagResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\CreateTagResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\CreateTagResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\CreateTagResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postTagsCreateAsync
     *
     * Create Tag
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostTagsCreateRequest $postTagsCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postTagsCreateAsync($postTagsCreateRequest)
    {
        return $this->postTagsCreateAsyncWithHttpInfo($postTagsCreateRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postTagsCreateAsyncWithHttpInfo
     *
     * Create Tag
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostTagsCreateRequest $postTagsCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postTagsCreateAsyncWithHttpInfo($postTagsCreateRequest)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\CreateTagResponse';
        $request = $this->postTagsCreateRequest($postTagsCreateRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postTagsCreate'
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostTagsCreateRequest $postTagsCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postTagsCreateRequest($postTagsCreateRequest)
    {
        // verify the required parameter 'postTagsCreateRequest' is set
        if ($postTagsCreateRequest === null || (is_array($postTagsCreateRequest) && count($postTagsCreateRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postTagsCreateRequest when calling postTagsCreate'
            );
        }

        $resourcePath = '/api/v2/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postTagsCreateRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postTagsCreateRequest));
            } else {
                $httpBody = $postTagsCreateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postTasksCreate
     *
     * Create Task
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostTasksCreateRequest $postTasksCreateRequest postTasksCreateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\CreateTaskResponse
     */
    public function postTasksCreate($postTasksCreateRequest)
    {
        list($response) = $this->postTasksCreateWithHttpInfo($postTasksCreateRequest);
        return $response;
    }

    /**
     * Operation postTasksCreateWithHttpInfo
     *
     * Create Task
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostTasksCreateRequest $postTasksCreateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\CreateTaskResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postTasksCreateWithHttpInfo($postTasksCreateRequest)
    {
        $request = $this->postTasksCreateRequest($postTasksCreateRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\CreateTaskResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\CreateTaskResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\CreateTaskResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\CreateTaskResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\CreateTaskResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postTasksCreateAsync
     *
     * Create Task
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostTasksCreateRequest $postTasksCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postTasksCreateAsync($postTasksCreateRequest)
    {
        return $this->postTasksCreateAsyncWithHttpInfo($postTasksCreateRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postTasksCreateAsyncWithHttpInfo
     *
     * Create Task
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostTasksCreateRequest $postTasksCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postTasksCreateAsyncWithHttpInfo($postTasksCreateRequest)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\CreateTaskResponse';
        $request = $this->postTasksCreateRequest($postTasksCreateRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postTasksCreate'
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostTasksCreateRequest $postTasksCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postTasksCreateRequest($postTasksCreateRequest)
    {
        // verify the required parameter 'postTasksCreateRequest' is set
        if ($postTasksCreateRequest === null || (is_array($postTasksCreateRequest) && count($postTasksCreateRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postTasksCreateRequest when calling postTasksCreate'
            );
        }

        $resourcePath = '/api/v2/tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postTasksCreateRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postTasksCreateRequest));
            } else {
                $httpBody = $postTasksCreateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putBusinessModelDiagramsUpdate
     *
     * Update Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $xml  (required)
     * @param  \SplFileObject $snapshot Snapshot of the process diagram (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\UpdateBusinessModelDiagramResponse
     */
    public function putBusinessModelDiagramsUpdate($diagramId, $xml, $snapshot = null)
    {
        list($response) = $this->putBusinessModelDiagramsUpdateWithHttpInfo($diagramId, $xml, $snapshot);
        return $response;
    }

    /**
     * Operation putBusinessModelDiagramsUpdateWithHttpInfo
     *
     * Update Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $xml  (required)
     * @param  \SplFileObject $snapshot Snapshot of the process diagram (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\UpdateBusinessModelDiagramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putBusinessModelDiagramsUpdateWithHttpInfo($diagramId, $xml, $snapshot = null)
    {
        $request = $this->putBusinessModelDiagramsUpdateRequest($diagramId, $xml, $snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\UpdateBusinessModelDiagramResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\UpdateBusinessModelDiagramResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\UpdateBusinessModelDiagramResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\UpdateBusinessModelDiagramResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\UpdateBusinessModelDiagramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putBusinessModelDiagramsUpdateAsync
     *
     * Update Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $xml  (required)
     * @param  \SplFileObject $snapshot Snapshot of the process diagram (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putBusinessModelDiagramsUpdateAsync($diagramId, $xml, $snapshot = null)
    {
        return $this->putBusinessModelDiagramsUpdateAsyncWithHttpInfo($diagramId, $xml, $snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putBusinessModelDiagramsUpdateAsyncWithHttpInfo
     *
     * Update Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $xml  (required)
     * @param  \SplFileObject $snapshot Snapshot of the process diagram (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putBusinessModelDiagramsUpdateAsyncWithHttpInfo($diagramId, $xml, $snapshot = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\UpdateBusinessModelDiagramResponse';
        $request = $this->putBusinessModelDiagramsUpdateRequest($diagramId, $xml, $snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putBusinessModelDiagramsUpdate'
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $xml  (required)
     * @param  \SplFileObject $snapshot Snapshot of the process diagram (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putBusinessModelDiagramsUpdateRequest($diagramId, $xml, $snapshot = null)
    {
        // verify the required parameter 'diagramId' is set
        if ($diagramId === null || (is_array($diagramId) && count($diagramId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diagramId when calling putBusinessModelDiagramsUpdate'
            );
        }
        // verify the required parameter 'xml' is set
        if ($xml === null || (is_array($xml) && count($xml) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xml when calling putBusinessModelDiagramsUpdate'
            );
        }

        $resourcePath = '/api/v2/business-model-diagrams/{diagram_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($diagramId !== null) {
            $resourcePath = str_replace(
                '{' . 'diagram_id' . '}',
                ObjectSerializer::toPathValue($diagramId),
                $resourcePath
            );
        }

        // form params
        if ($xml !== null) {
            $formParams['xml'] = ObjectSerializer::toFormValue($xml);
        }
        // form params
        if ($snapshot !== null) {
            $multipart = true;
            $formParams['snapshot'] = [];
            $paramFiles = is_array($snapshot) ? $snapshot : [$snapshot];
            foreach ($paramFiles as $paramFile) {
                $formParams['snapshot'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putBusinessModelExceptionsUpdate
     *
     * Update Business Model Exception
     *
     * @param  string $exceptionId The ID of the exception. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutBusinessModelExceptionsUpdateRequest $putBusinessModelExceptionsUpdateRequest putBusinessModelExceptionsUpdateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\UpdateBusinessModelExceptionResponse
     */
    public function putBusinessModelExceptionsUpdate($exceptionId, $putBusinessModelExceptionsUpdateRequest)
    {
        list($response) = $this->putBusinessModelExceptionsUpdateWithHttpInfo($exceptionId, $putBusinessModelExceptionsUpdateRequest);
        return $response;
    }

    /**
     * Operation putBusinessModelExceptionsUpdateWithHttpInfo
     *
     * Update Business Model Exception
     *
     * @param  string $exceptionId The ID of the exception. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutBusinessModelExceptionsUpdateRequest $putBusinessModelExceptionsUpdateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\UpdateBusinessModelExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putBusinessModelExceptionsUpdateWithHttpInfo($exceptionId, $putBusinessModelExceptionsUpdateRequest)
    {
        $request = $this->putBusinessModelExceptionsUpdateRequest($exceptionId, $putBusinessModelExceptionsUpdateRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\UpdateBusinessModelExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\UpdateBusinessModelExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\UpdateBusinessModelExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\UpdateBusinessModelExceptionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\UpdateBusinessModelExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putBusinessModelExceptionsUpdateAsync
     *
     * Update Business Model Exception
     *
     * @param  string $exceptionId The ID of the exception. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutBusinessModelExceptionsUpdateRequest $putBusinessModelExceptionsUpdateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putBusinessModelExceptionsUpdateAsync($exceptionId, $putBusinessModelExceptionsUpdateRequest)
    {
        return $this->putBusinessModelExceptionsUpdateAsyncWithHttpInfo($exceptionId, $putBusinessModelExceptionsUpdateRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putBusinessModelExceptionsUpdateAsyncWithHttpInfo
     *
     * Update Business Model Exception
     *
     * @param  string $exceptionId The ID of the exception. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutBusinessModelExceptionsUpdateRequest $putBusinessModelExceptionsUpdateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putBusinessModelExceptionsUpdateAsyncWithHttpInfo($exceptionId, $putBusinessModelExceptionsUpdateRequest)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\UpdateBusinessModelExceptionResponse';
        $request = $this->putBusinessModelExceptionsUpdateRequest($exceptionId, $putBusinessModelExceptionsUpdateRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putBusinessModelExceptionsUpdate'
     *
     * @param  string $exceptionId The ID of the exception. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutBusinessModelExceptionsUpdateRequest $putBusinessModelExceptionsUpdateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putBusinessModelExceptionsUpdateRequest($exceptionId, $putBusinessModelExceptionsUpdateRequest)
    {
        // verify the required parameter 'exceptionId' is set
        if ($exceptionId === null || (is_array($exceptionId) && count($exceptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exceptionId when calling putBusinessModelExceptionsUpdate'
            );
        }
        // verify the required parameter 'putBusinessModelExceptionsUpdateRequest' is set
        if ($putBusinessModelExceptionsUpdateRequest === null || (is_array($putBusinessModelExceptionsUpdateRequest) && count($putBusinessModelExceptionsUpdateRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $putBusinessModelExceptionsUpdateRequest when calling putBusinessModelExceptionsUpdate'
            );
        }

        $resourcePath = '/api/v2/business-model-exceptions/{exception_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($exceptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'exception_id' . '}',
                ObjectSerializer::toPathValue($exceptionId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($putBusinessModelExceptionsUpdateRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($putBusinessModelExceptionsUpdateRequest));
            } else {
                $httpBody = $putBusinessModelExceptionsUpdateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putBusinessModelsUpdate
     *
     * Update Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutBusinessModelsUpdateRequest $putBusinessModelsUpdateRequest putBusinessModelsUpdateRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\UpdateBusinessModelResponse
     */
    public function putBusinessModelsUpdate($modelId, $putBusinessModelsUpdateRequest = null)
    {
        list($response) = $this->putBusinessModelsUpdateWithHttpInfo($modelId, $putBusinessModelsUpdateRequest);
        return $response;
    }

    /**
     * Operation putBusinessModelsUpdateWithHttpInfo
     *
     * Update Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutBusinessModelsUpdateRequest $putBusinessModelsUpdateRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\UpdateBusinessModelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putBusinessModelsUpdateWithHttpInfo($modelId, $putBusinessModelsUpdateRequest = null)
    {
        $request = $this->putBusinessModelsUpdateRequest($modelId, $putBusinessModelsUpdateRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\UpdateBusinessModelResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\UpdateBusinessModelResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\UpdateBusinessModelResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\UpdateBusinessModelResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\UpdateBusinessModelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putBusinessModelsUpdateAsync
     *
     * Update Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutBusinessModelsUpdateRequest $putBusinessModelsUpdateRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putBusinessModelsUpdateAsync($modelId, $putBusinessModelsUpdateRequest = null)
    {
        return $this->putBusinessModelsUpdateAsyncWithHttpInfo($modelId, $putBusinessModelsUpdateRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putBusinessModelsUpdateAsyncWithHttpInfo
     *
     * Update Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutBusinessModelsUpdateRequest $putBusinessModelsUpdateRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putBusinessModelsUpdateAsyncWithHttpInfo($modelId, $putBusinessModelsUpdateRequest = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\UpdateBusinessModelResponse';
        $request = $this->putBusinessModelsUpdateRequest($modelId, $putBusinessModelsUpdateRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putBusinessModelsUpdate'
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutBusinessModelsUpdateRequest $putBusinessModelsUpdateRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putBusinessModelsUpdateRequest($modelId, $putBusinessModelsUpdateRequest = null)
    {
        // verify the required parameter 'modelId' is set
        if ($modelId === null || (is_array($modelId) && count($modelId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modelId when calling putBusinessModelsUpdate'
            );
        }

        $resourcePath = '/api/v2/business-models/{model_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($modelId !== null) {
            $resourcePath = str_replace(
                '{' . 'model_id' . '}',
                ObjectSerializer::toPathValue($modelId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($putBusinessModelsUpdateRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($putBusinessModelsUpdateRequest));
            } else {
                $httpBody = $putBusinessModelsUpdateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putBusinessProcessesUpdate
     *
     * Update Business Process Tag
     *
     * @param  int $tagId The ID of the tag. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutBusinessProcessesUpdateRequest $putBusinessProcessesUpdateRequest putBusinessProcessesUpdateRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\UpdateBusinessProcessTagResponse
     */
    public function putBusinessProcessesUpdate($tagId, $putBusinessProcessesUpdateRequest = null)
    {
        list($response) = $this->putBusinessProcessesUpdateWithHttpInfo($tagId, $putBusinessProcessesUpdateRequest);
        return $response;
    }

    /**
     * Operation putBusinessProcessesUpdateWithHttpInfo
     *
     * Update Business Process Tag
     *
     * @param  int $tagId The ID of the tag. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutBusinessProcessesUpdateRequest $putBusinessProcessesUpdateRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\UpdateBusinessProcessTagResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putBusinessProcessesUpdateWithHttpInfo($tagId, $putBusinessProcessesUpdateRequest = null)
    {
        $request = $this->putBusinessProcessesUpdateRequest($tagId, $putBusinessProcessesUpdateRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\UpdateBusinessProcessTagResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\UpdateBusinessProcessTagResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\UpdateBusinessProcessTagResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\UpdateBusinessProcessTagResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\UpdateBusinessProcessTagResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putBusinessProcessesUpdateAsync
     *
     * Update Business Process Tag
     *
     * @param  int $tagId The ID of the tag. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutBusinessProcessesUpdateRequest $putBusinessProcessesUpdateRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putBusinessProcessesUpdateAsync($tagId, $putBusinessProcessesUpdateRequest = null)
    {
        return $this->putBusinessProcessesUpdateAsyncWithHttpInfo($tagId, $putBusinessProcessesUpdateRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putBusinessProcessesUpdateAsyncWithHttpInfo
     *
     * Update Business Process Tag
     *
     * @param  int $tagId The ID of the tag. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutBusinessProcessesUpdateRequest $putBusinessProcessesUpdateRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putBusinessProcessesUpdateAsyncWithHttpInfo($tagId, $putBusinessProcessesUpdateRequest = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\UpdateBusinessProcessTagResponse';
        $request = $this->putBusinessProcessesUpdateRequest($tagId, $putBusinessProcessesUpdateRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putBusinessProcessesUpdate'
     *
     * @param  int $tagId The ID of the tag. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutBusinessProcessesUpdateRequest $putBusinessProcessesUpdateRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putBusinessProcessesUpdateRequest($tagId, $putBusinessProcessesUpdateRequest = null)
    {
        // verify the required parameter 'tagId' is set
        if ($tagId === null || (is_array($tagId) && count($tagId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tagId when calling putBusinessProcessesUpdate'
            );
        }

        $resourcePath = '/api/v2/business-processes/{tag_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tagId !== null) {
            $resourcePath = str_replace(
                '{' . 'tag_id' . '}',
                ObjectSerializer::toPathValue($tagId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($putBusinessProcessesUpdateRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($putBusinessProcessesUpdateRequest));
            } else {
                $httpBody = $putBusinessProcessesUpdateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCategoriesUpdate
     *
     * Update Category
     *
     * @param  int $id The ID of the category. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutCategoriesUpdateRequest $putCategoriesUpdateRequest putCategoriesUpdateRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\UpdateCategoryResponse
     */
    public function putCategoriesUpdate($id, $putCategoriesUpdateRequest = null)
    {
        list($response) = $this->putCategoriesUpdateWithHttpInfo($id, $putCategoriesUpdateRequest);
        return $response;
    }

    /**
     * Operation putCategoriesUpdateWithHttpInfo
     *
     * Update Category
     *
     * @param  int $id The ID of the category. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutCategoriesUpdateRequest $putCategoriesUpdateRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\UpdateCategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCategoriesUpdateWithHttpInfo($id, $putCategoriesUpdateRequest = null)
    {
        $request = $this->putCategoriesUpdateRequest($id, $putCategoriesUpdateRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\UpdateCategoryResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\UpdateCategoryResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\UpdateCategoryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\UpdateCategoryResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\UpdateCategoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCategoriesUpdateAsync
     *
     * Update Category
     *
     * @param  int $id The ID of the category. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutCategoriesUpdateRequest $putCategoriesUpdateRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCategoriesUpdateAsync($id, $putCategoriesUpdateRequest = null)
    {
        return $this->putCategoriesUpdateAsyncWithHttpInfo($id, $putCategoriesUpdateRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCategoriesUpdateAsyncWithHttpInfo
     *
     * Update Category
     *
     * @param  int $id The ID of the category. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutCategoriesUpdateRequest $putCategoriesUpdateRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCategoriesUpdateAsyncWithHttpInfo($id, $putCategoriesUpdateRequest = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\UpdateCategoryResponse';
        $request = $this->putCategoriesUpdateRequest($id, $putCategoriesUpdateRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCategoriesUpdate'
     *
     * @param  int $id The ID of the category. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutCategoriesUpdateRequest $putCategoriesUpdateRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putCategoriesUpdateRequest($id, $putCategoriesUpdateRequest = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putCategoriesUpdate'
            );
        }

        $resourcePath = '/api/v2/categories/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($putCategoriesUpdateRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($putCategoriesUpdateRequest));
            } else {
                $httpBody = $putCategoriesUpdateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putTagsUpdate
     *
     * Update Tag
     *
     * @param  int $id The ID of the tag. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutTagsUpdateRequest $putTagsUpdateRequest putTagsUpdateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\UpdateTagResponse
     */
    public function putTagsUpdate($id, $putTagsUpdateRequest)
    {
        list($response) = $this->putTagsUpdateWithHttpInfo($id, $putTagsUpdateRequest);
        return $response;
    }

    /**
     * Operation putTagsUpdateWithHttpInfo
     *
     * Update Tag
     *
     * @param  int $id The ID of the tag. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutTagsUpdateRequest $putTagsUpdateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\UpdateTagResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putTagsUpdateWithHttpInfo($id, $putTagsUpdateRequest)
    {
        $request = $this->putTagsUpdateRequest($id, $putTagsUpdateRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\UpdateTagResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\UpdateTagResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\UpdateTagResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\UpdateTagResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\UpdateTagResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putTagsUpdateAsync
     *
     * Update Tag
     *
     * @param  int $id The ID of the tag. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutTagsUpdateRequest $putTagsUpdateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putTagsUpdateAsync($id, $putTagsUpdateRequest)
    {
        return $this->putTagsUpdateAsyncWithHttpInfo($id, $putTagsUpdateRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putTagsUpdateAsyncWithHttpInfo
     *
     * Update Tag
     *
     * @param  int $id The ID of the tag. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutTagsUpdateRequest $putTagsUpdateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putTagsUpdateAsyncWithHttpInfo($id, $putTagsUpdateRequest)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\UpdateTagResponse';
        $request = $this->putTagsUpdateRequest($id, $putTagsUpdateRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putTagsUpdate'
     *
     * @param  int $id The ID of the tag. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutTagsUpdateRequest $putTagsUpdateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putTagsUpdateRequest($id, $putTagsUpdateRequest)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putTagsUpdate'
            );
        }
        // verify the required parameter 'putTagsUpdateRequest' is set
        if ($putTagsUpdateRequest === null || (is_array($putTagsUpdateRequest) && count($putTagsUpdateRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $putTagsUpdateRequest when calling putTagsUpdate'
            );
        }

        $resourcePath = '/api/v2/tags/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($putTagsUpdateRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($putTagsUpdateRequest));
            } else {
                $httpBody = $putTagsUpdateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putTasksUpdate
     *
     * Update Task
     *
     * @param  string $id The ID of the task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutTasksUpdateRequest $putTasksUpdateRequest putTasksUpdateRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\UpdateTaskResponse
     */
    public function putTasksUpdate($id, $putTasksUpdateRequest = null)
    {
        list($response) = $this->putTasksUpdateWithHttpInfo($id, $putTasksUpdateRequest);
        return $response;
    }

    /**
     * Operation putTasksUpdateWithHttpInfo
     *
     * Update Task
     *
     * @param  string $id The ID of the task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutTasksUpdateRequest $putTasksUpdateRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\UpdateTaskResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putTasksUpdateWithHttpInfo($id, $putTasksUpdateRequest = null)
    {
        $request = $this->putTasksUpdateRequest($id, $putTasksUpdateRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\UpdateTaskResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\UpdateTaskResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\UpdateTaskResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\UpdateTaskResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\UpdateTaskResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putTasksUpdateAsync
     *
     * Update Task
     *
     * @param  string $id The ID of the task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutTasksUpdateRequest $putTasksUpdateRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putTasksUpdateAsync($id, $putTasksUpdateRequest = null)
    {
        return $this->putTasksUpdateAsyncWithHttpInfo($id, $putTasksUpdateRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putTasksUpdateAsyncWithHttpInfo
     *
     * Update Task
     *
     * @param  string $id The ID of the task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutTasksUpdateRequest $putTasksUpdateRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putTasksUpdateAsyncWithHttpInfo($id, $putTasksUpdateRequest = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\UpdateTaskResponse';
        $request = $this->putTasksUpdateRequest($id, $putTasksUpdateRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putTasksUpdate'
     *
     * @param  string $id The ID of the task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PutTasksUpdateRequest $putTasksUpdateRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putTasksUpdateRequest($id, $putTasksUpdateRequest = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putTasksUpdate'
            );
        }

        $resourcePath = '/api/v2/tasks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($putTasksUpdateRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($putTasksUpdateRequest));
            } else {
                $httpBody = $putTasksUpdateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
