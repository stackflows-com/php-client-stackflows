<?php
/**
 * AuthenticatedEnvironmentServiceTasksApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Stackflows\Clients\Stackflows
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stackflows REST API
 *
 * Pagination query params are as follows: page[size]=10&page[number]=1
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Stackflows\Clients\Stackflows\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Stackflows\Clients\Stackflows\ApiException;
use Stackflows\Clients\Stackflows\Configuration;
use Stackflows\Clients\Stackflows\HeaderSelector;
use Stackflows\Clients\Stackflows\ObjectSerializer;

/**
 * AuthenticatedEnvironmentServiceTasksApi Class Doc Comment
 *
 * @category Class
 * @package  Stackflows\Clients\Stackflows
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AuthenticatedEnvironmentServiceTasksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation authServiceTasksLock
     *
     * Lock
     *
     * @param  \Stackflows\Clients\Stackflows\Model\AuthServiceTasksLockRequest $authServiceTasksLockRequest authServiceTasksLockRequest (required)
     * @param  string $contentType  (optional)
     * @param  string $accept  (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function authServiceTasksLock($authServiceTasksLockRequest, $contentType = null, $accept = null)
    {
        $this->authServiceTasksLockWithHttpInfo($authServiceTasksLockRequest, $contentType, $accept);
    }

    /**
     * Operation authServiceTasksLockWithHttpInfo
     *
     * Lock
     *
     * @param  \Stackflows\Clients\Stackflows\Model\AuthServiceTasksLockRequest $authServiceTasksLockRequest (required)
     * @param  string $contentType  (optional)
     * @param  string $accept  (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function authServiceTasksLockWithHttpInfo($authServiceTasksLockRequest, $contentType = null, $accept = null)
    {
        $request = $this->authServiceTasksLockRequest($authServiceTasksLockRequest, $contentType, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation authServiceTasksLockAsync
     *
     * Lock
     *
     * @param  \Stackflows\Clients\Stackflows\Model\AuthServiceTasksLockRequest $authServiceTasksLockRequest (required)
     * @param  string $contentType  (optional)
     * @param  string $accept  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authServiceTasksLockAsync($authServiceTasksLockRequest, $contentType = null, $accept = null)
    {
        return $this->authServiceTasksLockAsyncWithHttpInfo($authServiceTasksLockRequest, $contentType, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authServiceTasksLockAsyncWithHttpInfo
     *
     * Lock
     *
     * @param  \Stackflows\Clients\Stackflows\Model\AuthServiceTasksLockRequest $authServiceTasksLockRequest (required)
     * @param  string $contentType  (optional)
     * @param  string $accept  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authServiceTasksLockAsyncWithHttpInfo($authServiceTasksLockRequest, $contentType = null, $accept = null)
    {
        $returnType = '';
        $request = $this->authServiceTasksLockRequest($authServiceTasksLockRequest, $contentType, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authServiceTasksLock'
     *
     * @param  \Stackflows\Clients\Stackflows\Model\AuthServiceTasksLockRequest $authServiceTasksLockRequest (required)
     * @param  string $contentType  (optional)
     * @param  string $accept  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authServiceTasksLockRequest($authServiceTasksLockRequest, $contentType = null, $accept = null)
    {
        // verify the required parameter 'authServiceTasksLockRequest' is set
        if ($authServiceTasksLockRequest === null || (is_array($authServiceTasksLockRequest) && count($authServiceTasksLockRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authServiceTasksLockRequest when calling authServiceTasksLock'
            );
        }

        $resourcePath = '/api/v2/auth/environment/service-tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($contentType !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($contentType);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($authServiceTasksLockRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($authServiceTasksLockRequest));
            } else {
                $httpBody = $authServiceTasksLockRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authServiceTasksServe
     *
     * Serve
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\AuthServiceTasksServeRequest $authServiceTasksServeRequest authServiceTasksServeRequest (required)
     * @param  string $contentType  (optional)
     * @param  string $accept  (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function authServiceTasksServe($reference, $authServiceTasksServeRequest, $contentType = null, $accept = null)
    {
        $this->authServiceTasksServeWithHttpInfo($reference, $authServiceTasksServeRequest, $contentType, $accept);
    }

    /**
     * Operation authServiceTasksServeWithHttpInfo
     *
     * Serve
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\AuthServiceTasksServeRequest $authServiceTasksServeRequest (required)
     * @param  string $contentType  (optional)
     * @param  string $accept  (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function authServiceTasksServeWithHttpInfo($reference, $authServiceTasksServeRequest, $contentType = null, $accept = null)
    {
        $request = $this->authServiceTasksServeRequest($reference, $authServiceTasksServeRequest, $contentType, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation authServiceTasksServeAsync
     *
     * Serve
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\AuthServiceTasksServeRequest $authServiceTasksServeRequest (required)
     * @param  string $contentType  (optional)
     * @param  string $accept  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authServiceTasksServeAsync($reference, $authServiceTasksServeRequest, $contentType = null, $accept = null)
    {
        return $this->authServiceTasksServeAsyncWithHttpInfo($reference, $authServiceTasksServeRequest, $contentType, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authServiceTasksServeAsyncWithHttpInfo
     *
     * Serve
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\AuthServiceTasksServeRequest $authServiceTasksServeRequest (required)
     * @param  string $contentType  (optional)
     * @param  string $accept  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authServiceTasksServeAsyncWithHttpInfo($reference, $authServiceTasksServeRequest, $contentType = null, $accept = null)
    {
        $returnType = '';
        $request = $this->authServiceTasksServeRequest($reference, $authServiceTasksServeRequest, $contentType, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authServiceTasksServe'
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\AuthServiceTasksServeRequest $authServiceTasksServeRequest (required)
     * @param  string $contentType  (optional)
     * @param  string $accept  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authServiceTasksServeRequest($reference, $authServiceTasksServeRequest, $contentType = null, $accept = null)
    {
        // verify the required parameter 'reference' is set
        if ($reference === null || (is_array($reference) && count($reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference when calling authServiceTasksServe'
            );
        }
        // verify the required parameter 'authServiceTasksServeRequest' is set
        if ($authServiceTasksServeRequest === null || (is_array($authServiceTasksServeRequest) && count($authServiceTasksServeRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authServiceTasksServeRequest when calling authServiceTasksServe'
            );
        }

        $resourcePath = '/api/v2/auth/environment/service-tasks/{reference}/serve';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($contentType !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($contentType);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                '{' . 'reference' . '}',
                ObjectSerializer::toPathValue($reference),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($authServiceTasksServeRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($authServiceTasksServeRequest));
            } else {
                $httpBody = $authServiceTasksServeRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authServiceTasksUnlock
     *
     * Unlock
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\AuthServiceTasksUnlockRequest $authServiceTasksUnlockRequest authServiceTasksUnlockRequest (required)
     * @param  string $contentType  (optional)
     * @param  string $accept  (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function authServiceTasksUnlock($reference, $authServiceTasksUnlockRequest, $contentType = null, $accept = null)
    {
        $this->authServiceTasksUnlockWithHttpInfo($reference, $authServiceTasksUnlockRequest, $contentType, $accept);
    }

    /**
     * Operation authServiceTasksUnlockWithHttpInfo
     *
     * Unlock
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\AuthServiceTasksUnlockRequest $authServiceTasksUnlockRequest (required)
     * @param  string $contentType  (optional)
     * @param  string $accept  (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function authServiceTasksUnlockWithHttpInfo($reference, $authServiceTasksUnlockRequest, $contentType = null, $accept = null)
    {
        $request = $this->authServiceTasksUnlockRequest($reference, $authServiceTasksUnlockRequest, $contentType, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation authServiceTasksUnlockAsync
     *
     * Unlock
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\AuthServiceTasksUnlockRequest $authServiceTasksUnlockRequest (required)
     * @param  string $contentType  (optional)
     * @param  string $accept  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authServiceTasksUnlockAsync($reference, $authServiceTasksUnlockRequest, $contentType = null, $accept = null)
    {
        return $this->authServiceTasksUnlockAsyncWithHttpInfo($reference, $authServiceTasksUnlockRequest, $contentType, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authServiceTasksUnlockAsyncWithHttpInfo
     *
     * Unlock
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\AuthServiceTasksUnlockRequest $authServiceTasksUnlockRequest (required)
     * @param  string $contentType  (optional)
     * @param  string $accept  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authServiceTasksUnlockAsyncWithHttpInfo($reference, $authServiceTasksUnlockRequest, $contentType = null, $accept = null)
    {
        $returnType = '';
        $request = $this->authServiceTasksUnlockRequest($reference, $authServiceTasksUnlockRequest, $contentType, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authServiceTasksUnlock'
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\AuthServiceTasksUnlockRequest $authServiceTasksUnlockRequest (required)
     * @param  string $contentType  (optional)
     * @param  string $accept  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authServiceTasksUnlockRequest($reference, $authServiceTasksUnlockRequest, $contentType = null, $accept = null)
    {
        // verify the required parameter 'reference' is set
        if ($reference === null || (is_array($reference) && count($reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference when calling authServiceTasksUnlock'
            );
        }
        // verify the required parameter 'authServiceTasksUnlockRequest' is set
        if ($authServiceTasksUnlockRequest === null || (is_array($authServiceTasksUnlockRequest) && count($authServiceTasksUnlockRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authServiceTasksUnlockRequest when calling authServiceTasksUnlock'
            );
        }

        $resourcePath = '/api/v2/auth/environment/service-tasks/{reference}/unlock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($contentType !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($contentType);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                '{' . 'reference' . '}',
                ObjectSerializer::toPathValue($reference),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($authServiceTasksUnlockRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($authServiceTasksUnlockRequest));
            } else {
                $httpBody = $authServiceTasksUnlockRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
