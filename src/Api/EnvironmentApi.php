<?php
/**
 * EnvironmentApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Stackflows\Clients\Stackflows
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stackflows REST API
 *
 * Pagination query params are as follows: page[size]=10&page[number]=1
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Stackflows\Clients\Stackflows\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Stackflows\Clients\Stackflows\ApiException;
use Stackflows\Clients\Stackflows\Configuration;
use Stackflows\Clients\Stackflows\HeaderSelector;
use Stackflows\Clients\Stackflows\ObjectSerializer;

/**
 * EnvironmentApi Class Doc Comment
 *
 * @category Class
 * @package  Stackflows\Clients\Stackflows
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EnvironmentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteEnvironmentBusinessModelDiagrams
     *
     * Delete Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramResponse
     */
    public function deleteEnvironmentBusinessModelDiagrams($diagramId)
    {
        list($response) = $this->deleteEnvironmentBusinessModelDiagramsWithHttpInfo($diagramId);
        return $response;
    }

    /**
     * Operation deleteEnvironmentBusinessModelDiagramsWithHttpInfo
     *
     * Delete Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnvironmentBusinessModelDiagramsWithHttpInfo($diagramId)
    {
        $request = $this->deleteEnvironmentBusinessModelDiagramsRequest($diagramId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnvironmentBusinessModelDiagramsAsync
     *
     * Delete Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentBusinessModelDiagramsAsync($diagramId)
    {
        return $this->deleteEnvironmentBusinessModelDiagramsAsyncWithHttpInfo($diagramId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnvironmentBusinessModelDiagramsAsyncWithHttpInfo
     *
     * Delete Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentBusinessModelDiagramsAsyncWithHttpInfo($diagramId)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramResponse';
        $request = $this->deleteEnvironmentBusinessModelDiagramsRequest($diagramId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnvironmentBusinessModelDiagrams'
     *
     * @param  string $diagramId The ID of the diagram. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEnvironmentBusinessModelDiagramsRequest($diagramId)
    {
        // verify the required parameter 'diagramId' is set
        if ($diagramId === null || (is_array($diagramId) && count($diagramId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diagramId when calling deleteEnvironmentBusinessModelDiagrams'
            );
        }

        $resourcePath = '/api/v2/environment/business-model-diagrams/{diagram_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($diagramId !== null) {
            $resourcePath = str_replace(
                '{' . 'diagram_id' . '}',
                ObjectSerializer::toPathValue($diagramId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnvironmentBusinessModelDiagramsComments
     *
     * Delete Business Model Diagram Comment
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  int $commentId The ID of the comment. (required)
     * @param  string $diagram The ID of an diagram. (required)
     * @param  string $comment The ID of an comment. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramCommentResponse
     */
    public function deleteEnvironmentBusinessModelDiagramsComments($diagramId, $commentId, $diagram, $comment)
    {
        list($response) = $this->deleteEnvironmentBusinessModelDiagramsCommentsWithHttpInfo($diagramId, $commentId, $diagram, $comment);
        return $response;
    }

    /**
     * Operation deleteEnvironmentBusinessModelDiagramsCommentsWithHttpInfo
     *
     * Delete Business Model Diagram Comment
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  int $commentId The ID of the comment. (required)
     * @param  string $diagram The ID of an diagram. (required)
     * @param  string $comment The ID of an comment. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramCommentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnvironmentBusinessModelDiagramsCommentsWithHttpInfo($diagramId, $commentId, $diagram, $comment)
    {
        $request = $this->deleteEnvironmentBusinessModelDiagramsCommentsRequest($diagramId, $commentId, $diagram, $comment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramCommentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramCommentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramCommentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramCommentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramCommentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnvironmentBusinessModelDiagramsCommentsAsync
     *
     * Delete Business Model Diagram Comment
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  int $commentId The ID of the comment. (required)
     * @param  string $diagram The ID of an diagram. (required)
     * @param  string $comment The ID of an comment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentBusinessModelDiagramsCommentsAsync($diagramId, $commentId, $diagram, $comment)
    {
        return $this->deleteEnvironmentBusinessModelDiagramsCommentsAsyncWithHttpInfo($diagramId, $commentId, $diagram, $comment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnvironmentBusinessModelDiagramsCommentsAsyncWithHttpInfo
     *
     * Delete Business Model Diagram Comment
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  int $commentId The ID of the comment. (required)
     * @param  string $diagram The ID of an diagram. (required)
     * @param  string $comment The ID of an comment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentBusinessModelDiagramsCommentsAsyncWithHttpInfo($diagramId, $commentId, $diagram, $comment)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelDiagramCommentResponse';
        $request = $this->deleteEnvironmentBusinessModelDiagramsCommentsRequest($diagramId, $commentId, $diagram, $comment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnvironmentBusinessModelDiagramsComments'
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  int $commentId The ID of the comment. (required)
     * @param  string $diagram The ID of an diagram. (required)
     * @param  string $comment The ID of an comment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEnvironmentBusinessModelDiagramsCommentsRequest($diagramId, $commentId, $diagram, $comment)
    {
        // verify the required parameter 'diagramId' is set
        if ($diagramId === null || (is_array($diagramId) && count($diagramId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diagramId when calling deleteEnvironmentBusinessModelDiagramsComments'
            );
        }
        // verify the required parameter 'commentId' is set
        if ($commentId === null || (is_array($commentId) && count($commentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commentId when calling deleteEnvironmentBusinessModelDiagramsComments'
            );
        }
        // verify the required parameter 'diagram' is set
        if ($diagram === null || (is_array($diagram) && count($diagram) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diagram when calling deleteEnvironmentBusinessModelDiagramsComments'
            );
        }
        // verify the required parameter 'comment' is set
        if ($comment === null || (is_array($comment) && count($comment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $comment when calling deleteEnvironmentBusinessModelDiagramsComments'
            );
        }

        $resourcePath = '/api/v2/environment/business-model-diagrams/{diagram_id}/comments/{comment_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($diagramId !== null) {
            $resourcePath = str_replace(
                '{' . 'diagram_id' . '}',
                ObjectSerializer::toPathValue($diagramId),
                $resourcePath
            );
        }
        // path params
        if ($commentId !== null) {
            $resourcePath = str_replace(
                '{' . 'comment_id' . '}',
                ObjectSerializer::toPathValue($commentId),
                $resourcePath
            );
        }
        // path params
        if ($diagram !== null) {
            $resourcePath = str_replace(
                '{' . 'diagram' . '}',
                ObjectSerializer::toPathValue($diagram),
                $resourcePath
            );
        }
        // path params
        if ($comment !== null) {
            $resourcePath = str_replace(
                '{' . 'comment' . '}',
                ObjectSerializer::toPathValue($comment),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnvironmentBusinessModels
     *
     * Delete Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelResponse
     */
    public function deleteEnvironmentBusinessModels($modelId)
    {
        list($response) = $this->deleteEnvironmentBusinessModelsWithHttpInfo($modelId);
        return $response;
    }

    /**
     * Operation deleteEnvironmentBusinessModelsWithHttpInfo
     *
     * Delete Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\DeleteBusinessModelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnvironmentBusinessModelsWithHttpInfo($modelId)
    {
        $request = $this->deleteEnvironmentBusinessModelsRequest($modelId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnvironmentBusinessModelsAsync
     *
     * Delete Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentBusinessModelsAsync($modelId)
    {
        return $this->deleteEnvironmentBusinessModelsAsyncWithHttpInfo($modelId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnvironmentBusinessModelsAsyncWithHttpInfo
     *
     * Delete Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentBusinessModelsAsyncWithHttpInfo($modelId)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\DeleteBusinessModelResponse';
        $request = $this->deleteEnvironmentBusinessModelsRequest($modelId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnvironmentBusinessModels'
     *
     * @param  string $modelId The ID of the model. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEnvironmentBusinessModelsRequest($modelId)
    {
        // verify the required parameter 'modelId' is set
        if ($modelId === null || (is_array($modelId) && count($modelId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modelId when calling deleteEnvironmentBusinessModels'
            );
        }

        $resourcePath = '/api/v2/environment/business-models/{model_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($modelId !== null) {
            $resourcePath = str_replace(
                '{' . 'model_id' . '}',
                ObjectSerializer::toPathValue($modelId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentBusinessModelDiagramsCommentsList
     *
     * List Business Model Diagram Comments
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramCommentsResponse
     */
    public function getEnvironmentBusinessModelDiagramsCommentsList($diagramId, $include = null)
    {
        list($response) = $this->getEnvironmentBusinessModelDiagramsCommentsListWithHttpInfo($diagramId, $include);
        return $response;
    }

    /**
     * Operation getEnvironmentBusinessModelDiagramsCommentsListWithHttpInfo
     *
     * List Business Model Diagram Comments
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramCommentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentBusinessModelDiagramsCommentsListWithHttpInfo($diagramId, $include = null)
    {
        $request = $this->getEnvironmentBusinessModelDiagramsCommentsListRequest($diagramId, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramCommentsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramCommentsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramCommentsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramCommentsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramCommentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentBusinessModelDiagramsCommentsListAsync
     *
     * List Business Model Diagram Comments
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentBusinessModelDiagramsCommentsListAsync($diagramId, $include = null)
    {
        return $this->getEnvironmentBusinessModelDiagramsCommentsListAsyncWithHttpInfo($diagramId, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentBusinessModelDiagramsCommentsListAsyncWithHttpInfo
     *
     * List Business Model Diagram Comments
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentBusinessModelDiagramsCommentsListAsyncWithHttpInfo($diagramId, $include = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramCommentsResponse';
        $request = $this->getEnvironmentBusinessModelDiagramsCommentsListRequest($diagramId, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentBusinessModelDiagramsCommentsList'
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentBusinessModelDiagramsCommentsListRequest($diagramId, $include = null)
    {
        // verify the required parameter 'diagramId' is set
        if ($diagramId === null || (is_array($diagramId) && count($diagramId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diagramId when calling getEnvironmentBusinessModelDiagramsCommentsList'
            );
        }

        $resourcePath = '/api/v2/environment/business-model-diagrams/{diagram_id}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($diagramId !== null) {
            $resourcePath = str_replace(
                '{' . 'diagram_id' . '}',
                ObjectSerializer::toPathValue($diagramId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentBusinessModelDiagramsList
     *
     * List Business Model Diagram
     *
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramResponse
     */
    public function getEnvironmentBusinessModelDiagramsList()
    {
        list($response) = $this->getEnvironmentBusinessModelDiagramsListWithHttpInfo();
        return $response;
    }

    /**
     * Operation getEnvironmentBusinessModelDiagramsListWithHttpInfo
     *
     * List Business Model Diagram
     *
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentBusinessModelDiagramsListWithHttpInfo()
    {
        $request = $this->getEnvironmentBusinessModelDiagramsListRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentBusinessModelDiagramsListAsync
     *
     * List Business Model Diagram
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentBusinessModelDiagramsListAsync()
    {
        return $this->getEnvironmentBusinessModelDiagramsListAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentBusinessModelDiagramsListAsyncWithHttpInfo
     *
     * List Business Model Diagram
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentBusinessModelDiagramsListAsyncWithHttpInfo()
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelDiagramResponse';
        $request = $this->getEnvironmentBusinessModelDiagramsListRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentBusinessModelDiagramsList'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentBusinessModelDiagramsListRequest()
    {

        $resourcePath = '/api/v2/environment/business-model-diagrams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentBusinessModelDiagramsShow
     *
     * View Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $includesnapshotsdeploysdeploysStatistics Possible includes (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse1
     */
    public function getEnvironmentBusinessModelDiagramsShow($diagramId, $includesnapshotsdeploysdeploysStatistics = null)
    {
        list($response) = $this->getEnvironmentBusinessModelDiagramsShowWithHttpInfo($diagramId, $includesnapshotsdeploysdeploysStatistics);
        return $response;
    }

    /**
     * Operation getEnvironmentBusinessModelDiagramsShowWithHttpInfo
     *
     * View Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $includesnapshotsdeploysdeploysStatistics Possible includes (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse1, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentBusinessModelDiagramsShowWithHttpInfo($diagramId, $includesnapshotsdeploysdeploysStatistics = null)
    {
        $request = $this->getEnvironmentBusinessModelDiagramsShowRequest($diagramId, $includesnapshotsdeploysdeploysStatistics);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentBusinessModelDiagramsShowAsync
     *
     * View Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $includesnapshotsdeploysdeploysStatistics Possible includes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentBusinessModelDiagramsShowAsync($diagramId, $includesnapshotsdeploysdeploysStatistics = null)
    {
        return $this->getEnvironmentBusinessModelDiagramsShowAsyncWithHttpInfo($diagramId, $includesnapshotsdeploysdeploysStatistics)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentBusinessModelDiagramsShowAsyncWithHttpInfo
     *
     * View Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $includesnapshotsdeploysdeploysStatistics Possible includes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentBusinessModelDiagramsShowAsyncWithHttpInfo($diagramId, $includesnapshotsdeploysdeploysStatistics = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelDiagramResponse1';
        $request = $this->getEnvironmentBusinessModelDiagramsShowRequest($diagramId, $includesnapshotsdeploysdeploysStatistics);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentBusinessModelDiagramsShow'
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  string $includesnapshotsdeploysdeploysStatistics Possible includes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentBusinessModelDiagramsShowRequest($diagramId, $includesnapshotsdeploysdeploysStatistics = null)
    {
        // verify the required parameter 'diagramId' is set
        if ($diagramId === null || (is_array($diagramId) && count($diagramId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diagramId when calling getEnvironmentBusinessModelDiagramsShow'
            );
        }

        $resourcePath = '/api/v2/environment/business-model-diagrams/{diagram_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includesnapshotsdeploysdeploysStatistics,
            'include&#x3D;snapshots,deploys,deploys.statistics', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($diagramId !== null) {
            $resourcePath = str_replace(
                '{' . 'diagram_id' . '}',
                ObjectSerializer::toPathValue($diagramId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentBusinessModelsCommentsList
     *
     * List Business Model Comments
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ListBusinessModelCommentsResponse
     */
    public function getEnvironmentBusinessModelsCommentsList($modelId, $include = null)
    {
        list($response) = $this->getEnvironmentBusinessModelsCommentsListWithHttpInfo($modelId, $include);
        return $response;
    }

    /**
     * Operation getEnvironmentBusinessModelsCommentsListWithHttpInfo
     *
     * List Business Model Comments
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ListBusinessModelCommentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentBusinessModelsCommentsListWithHttpInfo($modelId, $include = null)
    {
        $request = $this->getEnvironmentBusinessModelsCommentsListRequest($modelId, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelCommentsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelCommentsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ListBusinessModelCommentsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelCommentsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ListBusinessModelCommentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentBusinessModelsCommentsListAsync
     *
     * List Business Model Comments
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentBusinessModelsCommentsListAsync($modelId, $include = null)
    {
        return $this->getEnvironmentBusinessModelsCommentsListAsyncWithHttpInfo($modelId, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentBusinessModelsCommentsListAsyncWithHttpInfo
     *
     * List Business Model Comments
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentBusinessModelsCommentsListAsyncWithHttpInfo($modelId, $include = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelCommentsResponse';
        $request = $this->getEnvironmentBusinessModelsCommentsListRequest($modelId, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentBusinessModelsCommentsList'
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $include Specify a list of includes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentBusinessModelsCommentsListRequest($modelId, $include = null)
    {
        // verify the required parameter 'modelId' is set
        if ($modelId === null || (is_array($modelId) && count($modelId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modelId when calling getEnvironmentBusinessModelsCommentsList'
            );
        }

        $resourcePath = '/api/v2/environment/business-models/{model_id}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($modelId !== null) {
            $resourcePath = str_replace(
                '{' . 'model_id' . '}',
                ObjectSerializer::toPathValue($modelId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentBusinessModelsList
     *
     * List Business Models
     *
     * @param  string $include Possible includes. (optional)
     * @param  string $filterWithAnyTags Will return models that has any of specified tags. (optional)
     * @param  bool $filterWithoutAnyTags Will return list of all models that has no tags at all. (optional)
     * @param  string $filterAutocomplete Retrieve list that has \&quot;tes\&quot; at the start of their name. (optional)
     * @param  string $filterSearch Retrieve list that has \&quot;tes\&quot; in their name. (optional)
     * @param  string $filterCategories Filter by specific categories. (optional)
     * @param  string $filterType Filter by specific type. Example process,decision (optional)
     * @param  bool $filterUncategorized boolean List only uncategorized process models. (optional)
     * @param  bool $filterSubscribable List only subscribable process models. (optional)
     * @param  string $sort Sorting by specified criteria. (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ListBusinessModelsResponse
     */
    public function getEnvironmentBusinessModelsList($include = null, $filterWithAnyTags = null, $filterWithoutAnyTags = null, $filterAutocomplete = null, $filterSearch = null, $filterCategories = null, $filterType = null, $filterUncategorized = null, $filterSubscribable = null, $sort = null)
    {
        list($response) = $this->getEnvironmentBusinessModelsListWithHttpInfo($include, $filterWithAnyTags, $filterWithoutAnyTags, $filterAutocomplete, $filterSearch, $filterCategories, $filterType, $filterUncategorized, $filterSubscribable, $sort);
        return $response;
    }

    /**
     * Operation getEnvironmentBusinessModelsListWithHttpInfo
     *
     * List Business Models
     *
     * @param  string $include Possible includes. (optional)
     * @param  string $filterWithAnyTags Will return models that has any of specified tags. (optional)
     * @param  bool $filterWithoutAnyTags Will return list of all models that has no tags at all. (optional)
     * @param  string $filterAutocomplete Retrieve list that has \&quot;tes\&quot; at the start of their name. (optional)
     * @param  string $filterSearch Retrieve list that has \&quot;tes\&quot; in their name. (optional)
     * @param  string $filterCategories Filter by specific categories. (optional)
     * @param  string $filterType Filter by specific type. Example process,decision (optional)
     * @param  bool $filterUncategorized boolean List only uncategorized process models. (optional)
     * @param  bool $filterSubscribable List only subscribable process models. (optional)
     * @param  string $sort Sorting by specified criteria. (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ListBusinessModelsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentBusinessModelsListWithHttpInfo($include = null, $filterWithAnyTags = null, $filterWithoutAnyTags = null, $filterAutocomplete = null, $filterSearch = null, $filterCategories = null, $filterType = null, $filterUncategorized = null, $filterSubscribable = null, $sort = null)
    {
        $request = $this->getEnvironmentBusinessModelsListRequest($include, $filterWithAnyTags, $filterWithoutAnyTags, $filterAutocomplete, $filterSearch, $filterCategories, $filterType, $filterUncategorized, $filterSubscribable, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ListBusinessModelsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ListBusinessModelsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ListBusinessModelsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentBusinessModelsListAsync
     *
     * List Business Models
     *
     * @param  string $include Possible includes. (optional)
     * @param  string $filterWithAnyTags Will return models that has any of specified tags. (optional)
     * @param  bool $filterWithoutAnyTags Will return list of all models that has no tags at all. (optional)
     * @param  string $filterAutocomplete Retrieve list that has \&quot;tes\&quot; at the start of their name. (optional)
     * @param  string $filterSearch Retrieve list that has \&quot;tes\&quot; in their name. (optional)
     * @param  string $filterCategories Filter by specific categories. (optional)
     * @param  string $filterType Filter by specific type. Example process,decision (optional)
     * @param  bool $filterUncategorized boolean List only uncategorized process models. (optional)
     * @param  bool $filterSubscribable List only subscribable process models. (optional)
     * @param  string $sort Sorting by specified criteria. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentBusinessModelsListAsync($include = null, $filterWithAnyTags = null, $filterWithoutAnyTags = null, $filterAutocomplete = null, $filterSearch = null, $filterCategories = null, $filterType = null, $filterUncategorized = null, $filterSubscribable = null, $sort = null)
    {
        return $this->getEnvironmentBusinessModelsListAsyncWithHttpInfo($include, $filterWithAnyTags, $filterWithoutAnyTags, $filterAutocomplete, $filterSearch, $filterCategories, $filterType, $filterUncategorized, $filterSubscribable, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentBusinessModelsListAsyncWithHttpInfo
     *
     * List Business Models
     *
     * @param  string $include Possible includes. (optional)
     * @param  string $filterWithAnyTags Will return models that has any of specified tags. (optional)
     * @param  bool $filterWithoutAnyTags Will return list of all models that has no tags at all. (optional)
     * @param  string $filterAutocomplete Retrieve list that has \&quot;tes\&quot; at the start of their name. (optional)
     * @param  string $filterSearch Retrieve list that has \&quot;tes\&quot; in their name. (optional)
     * @param  string $filterCategories Filter by specific categories. (optional)
     * @param  string $filterType Filter by specific type. Example process,decision (optional)
     * @param  bool $filterUncategorized boolean List only uncategorized process models. (optional)
     * @param  bool $filterSubscribable List only subscribable process models. (optional)
     * @param  string $sort Sorting by specified criteria. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentBusinessModelsListAsyncWithHttpInfo($include = null, $filterWithAnyTags = null, $filterWithoutAnyTags = null, $filterAutocomplete = null, $filterSearch = null, $filterCategories = null, $filterType = null, $filterUncategorized = null, $filterSubscribable = null, $sort = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ListBusinessModelsResponse';
        $request = $this->getEnvironmentBusinessModelsListRequest($include, $filterWithAnyTags, $filterWithoutAnyTags, $filterAutocomplete, $filterSearch, $filterCategories, $filterType, $filterUncategorized, $filterSubscribable, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentBusinessModelsList'
     *
     * @param  string $include Possible includes. (optional)
     * @param  string $filterWithAnyTags Will return models that has any of specified tags. (optional)
     * @param  bool $filterWithoutAnyTags Will return list of all models that has no tags at all. (optional)
     * @param  string $filterAutocomplete Retrieve list that has \&quot;tes\&quot; at the start of their name. (optional)
     * @param  string $filterSearch Retrieve list that has \&quot;tes\&quot; in their name. (optional)
     * @param  string $filterCategories Filter by specific categories. (optional)
     * @param  string $filterType Filter by specific type. Example process,decision (optional)
     * @param  bool $filterUncategorized boolean List only uncategorized process models. (optional)
     * @param  bool $filterSubscribable List only subscribable process models. (optional)
     * @param  string $sort Sorting by specified criteria. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentBusinessModelsListRequest($include = null, $filterWithAnyTags = null, $filterWithoutAnyTags = null, $filterAutocomplete = null, $filterSearch = null, $filterCategories = null, $filterType = null, $filterUncategorized = null, $filterSubscribable = null, $sort = null)
    {

        $resourcePath = '/api/v2/environment/business-models';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterWithAnyTags,
            'filter[with-any-tags]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterWithoutAnyTags,
            'filter[without-any-tags]', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterAutocomplete,
            'filter[autocomplete]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterSearch,
            'filter[search]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterCategories,
            'filter[categories]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterType,
            'filter[type]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterUncategorized,
            'filter[uncategorized]', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filterSubscribable,
            'filter[subscribable]', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentBusinessModelsShow
     *
     * View Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $includeownercompanycategorytagscommentsCounttagsCountdiagrams Possible includes (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ViewBusinessModelResponse
     */
    public function getEnvironmentBusinessModelsShow($modelId, $includeownercompanycategorytagscommentsCounttagsCountdiagrams = null)
    {
        list($response) = $this->getEnvironmentBusinessModelsShowWithHttpInfo($modelId, $includeownercompanycategorytagscommentsCounttagsCountdiagrams);
        return $response;
    }

    /**
     * Operation getEnvironmentBusinessModelsShowWithHttpInfo
     *
     * View Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $includeownercompanycategorytagscommentsCounttagsCountdiagrams Possible includes (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ViewBusinessModelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentBusinessModelsShowWithHttpInfo($modelId, $includeownercompanycategorytagscommentsCounttagsCountdiagrams = null)
    {
        $request = $this->getEnvironmentBusinessModelsShowRequest($modelId, $includeownercompanycategorytagscommentsCounttagsCountdiagrams);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ViewBusinessModelResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ViewBusinessModelResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentBusinessModelsShowAsync
     *
     * View Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $includeownercompanycategorytagscommentsCounttagsCountdiagrams Possible includes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentBusinessModelsShowAsync($modelId, $includeownercompanycategorytagscommentsCounttagsCountdiagrams = null)
    {
        return $this->getEnvironmentBusinessModelsShowAsyncWithHttpInfo($modelId, $includeownercompanycategorytagscommentsCounttagsCountdiagrams)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentBusinessModelsShowAsyncWithHttpInfo
     *
     * View Business Model
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $includeownercompanycategorytagscommentsCounttagsCountdiagrams Possible includes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentBusinessModelsShowAsyncWithHttpInfo($modelId, $includeownercompanycategorytagscommentsCounttagsCountdiagrams = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ViewBusinessModelResponse';
        $request = $this->getEnvironmentBusinessModelsShowRequest($modelId, $includeownercompanycategorytagscommentsCounttagsCountdiagrams);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentBusinessModelsShow'
     *
     * @param  string $modelId The ID of the model. (required)
     * @param  string $includeownercompanycategorytagscommentsCounttagsCountdiagrams Possible includes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentBusinessModelsShowRequest($modelId, $includeownercompanycategorytagscommentsCounttagsCountdiagrams = null)
    {
        // verify the required parameter 'modelId' is set
        if ($modelId === null || (is_array($modelId) && count($modelId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modelId when calling getEnvironmentBusinessModelsShow'
            );
        }

        $resourcePath = '/api/v2/environment/business-models/{model_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeownercompanycategorytagscommentsCounttagsCountdiagrams,
            'include&#x3D;owner,company,category,tags,comments-count,tags-count,diagrams', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($modelId !== null) {
            $resourcePath = str_replace(
                '{' . 'model_id' . '}',
                ObjectSerializer::toPathValue($modelId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentUserTasksList
     *
     * List User Tasks
     *
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ListUserTasksResponse
     */
    public function getEnvironmentUserTasksList()
    {
        list($response) = $this->getEnvironmentUserTasksListWithHttpInfo();
        return $response;
    }

    /**
     * Operation getEnvironmentUserTasksListWithHttpInfo
     *
     * List User Tasks
     *
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ListUserTasksResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentUserTasksListWithHttpInfo()
    {
        $request = $this->getEnvironmentUserTasksListRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ListUserTasksResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ListUserTasksResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ListUserTasksResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ListUserTasksResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ListUserTasksResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentUserTasksListAsync
     *
     * List User Tasks
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentUserTasksListAsync()
    {
        return $this->getEnvironmentUserTasksListAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentUserTasksListAsyncWithHttpInfo
     *
     * List User Tasks
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentUserTasksListAsyncWithHttpInfo()
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ListUserTasksResponse';
        $request = $this->getEnvironmentUserTasksListRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentUserTasksList'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentUserTasksListRequest()
    {

        $resourcePath = '/api/v2/environment/user-tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentUserTasksView
     *
     * View User Task
     *
     * @param  string $id The id of the task. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ViewUserTaskResponse
     */
    public function getEnvironmentUserTasksView($id)
    {
        list($response) = $this->getEnvironmentUserTasksViewWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getEnvironmentUserTasksViewWithHttpInfo
     *
     * View User Task
     *
     * @param  string $id The id of the task. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ViewUserTaskResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentUserTasksViewWithHttpInfo($id)
    {
        $request = $this->getEnvironmentUserTasksViewRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ViewUserTaskResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ViewUserTaskResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ViewUserTaskResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ViewUserTaskResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ViewUserTaskResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentUserTasksViewAsync
     *
     * View User Task
     *
     * @param  string $id The id of the task. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentUserTasksViewAsync($id)
    {
        return $this->getEnvironmentUserTasksViewAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentUserTasksViewAsyncWithHttpInfo
     *
     * View User Task
     *
     * @param  string $id The id of the task. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentUserTasksViewAsyncWithHttpInfo($id)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ViewUserTaskResponse';
        $request = $this->getEnvironmentUserTasksViewRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentUserTasksView'
     *
     * @param  string $id The id of the task. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentUserTasksViewRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getEnvironmentUserTasksView'
            );
        }

        $resourcePath = '/api/v2/environment/user-tasks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentBusinessModelDiagramsCommentsCreate
     *
     * Create Business Model Diagram Comment
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentBusinessModelDiagramsCommentsCreateRequest $postEnvironmentBusinessModelDiagramsCommentsCreateRequest postEnvironmentBusinessModelDiagramsCommentsCreateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramCommentResponse
     */
    public function postEnvironmentBusinessModelDiagramsCommentsCreate($diagramId, $postEnvironmentBusinessModelDiagramsCommentsCreateRequest)
    {
        list($response) = $this->postEnvironmentBusinessModelDiagramsCommentsCreateWithHttpInfo($diagramId, $postEnvironmentBusinessModelDiagramsCommentsCreateRequest);
        return $response;
    }

    /**
     * Operation postEnvironmentBusinessModelDiagramsCommentsCreateWithHttpInfo
     *
     * Create Business Model Diagram Comment
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentBusinessModelDiagramsCommentsCreateRequest $postEnvironmentBusinessModelDiagramsCommentsCreateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramCommentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentBusinessModelDiagramsCommentsCreateWithHttpInfo($diagramId, $postEnvironmentBusinessModelDiagramsCommentsCreateRequest)
    {
        $request = $this->postEnvironmentBusinessModelDiagramsCommentsCreateRequest($diagramId, $postEnvironmentBusinessModelDiagramsCommentsCreateRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramCommentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramCommentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramCommentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramCommentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramCommentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentBusinessModelDiagramsCommentsCreateAsync
     *
     * Create Business Model Diagram Comment
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentBusinessModelDiagramsCommentsCreateRequest $postEnvironmentBusinessModelDiagramsCommentsCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentBusinessModelDiagramsCommentsCreateAsync($diagramId, $postEnvironmentBusinessModelDiagramsCommentsCreateRequest)
    {
        return $this->postEnvironmentBusinessModelDiagramsCommentsCreateAsyncWithHttpInfo($diagramId, $postEnvironmentBusinessModelDiagramsCommentsCreateRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentBusinessModelDiagramsCommentsCreateAsyncWithHttpInfo
     *
     * Create Business Model Diagram Comment
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentBusinessModelDiagramsCommentsCreateRequest $postEnvironmentBusinessModelDiagramsCommentsCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentBusinessModelDiagramsCommentsCreateAsyncWithHttpInfo($diagramId, $postEnvironmentBusinessModelDiagramsCommentsCreateRequest)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramCommentResponse';
        $request = $this->postEnvironmentBusinessModelDiagramsCommentsCreateRequest($diagramId, $postEnvironmentBusinessModelDiagramsCommentsCreateRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentBusinessModelDiagramsCommentsCreate'
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentBusinessModelDiagramsCommentsCreateRequest $postEnvironmentBusinessModelDiagramsCommentsCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentBusinessModelDiagramsCommentsCreateRequest($diagramId, $postEnvironmentBusinessModelDiagramsCommentsCreateRequest)
    {
        // verify the required parameter 'diagramId' is set
        if ($diagramId === null || (is_array($diagramId) && count($diagramId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diagramId when calling postEnvironmentBusinessModelDiagramsCommentsCreate'
            );
        }
        // verify the required parameter 'postEnvironmentBusinessModelDiagramsCommentsCreateRequest' is set
        if ($postEnvironmentBusinessModelDiagramsCommentsCreateRequest === null || (is_array($postEnvironmentBusinessModelDiagramsCommentsCreateRequest) && count($postEnvironmentBusinessModelDiagramsCommentsCreateRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postEnvironmentBusinessModelDiagramsCommentsCreateRequest when calling postEnvironmentBusinessModelDiagramsCommentsCreate'
            );
        }

        $resourcePath = '/api/v2/environment/business-model-diagrams/{diagram_id}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($diagramId !== null) {
            $resourcePath = str_replace(
                '{' . 'diagram_id' . '}',
                ObjectSerializer::toPathValue($diagramId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postEnvironmentBusinessModelDiagramsCommentsCreateRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postEnvironmentBusinessModelDiagramsCommentsCreateRequest));
            } else {
                $httpBody = $postEnvironmentBusinessModelDiagramsCommentsCreateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentBusinessModelDiagramsCreate
     *
     * Create Business Model Diagram
     *
     * @param  string $xml  (required)
     * @param  string $businessModelId  (required)
     * @param  \SplFileObject $snapshot of the process diagram (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramResponse
     */
    public function postEnvironmentBusinessModelDiagramsCreate($xml, $businessModelId, $snapshot = null)
    {
        list($response) = $this->postEnvironmentBusinessModelDiagramsCreateWithHttpInfo($xml, $businessModelId, $snapshot);
        return $response;
    }

    /**
     * Operation postEnvironmentBusinessModelDiagramsCreateWithHttpInfo
     *
     * Create Business Model Diagram
     *
     * @param  string $xml  (required)
     * @param  string $businessModelId  (required)
     * @param  \SplFileObject $snapshot of the process diagram (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentBusinessModelDiagramsCreateWithHttpInfo($xml, $businessModelId, $snapshot = null)
    {
        $request = $this->postEnvironmentBusinessModelDiagramsCreateRequest($xml, $businessModelId, $snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentBusinessModelDiagramsCreateAsync
     *
     * Create Business Model Diagram
     *
     * @param  string $xml  (required)
     * @param  string $businessModelId  (required)
     * @param  \SplFileObject $snapshot of the process diagram (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentBusinessModelDiagramsCreateAsync($xml, $businessModelId, $snapshot = null)
    {
        return $this->postEnvironmentBusinessModelDiagramsCreateAsyncWithHttpInfo($xml, $businessModelId, $snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentBusinessModelDiagramsCreateAsyncWithHttpInfo
     *
     * Create Business Model Diagram
     *
     * @param  string $xml  (required)
     * @param  string $businessModelId  (required)
     * @param  \SplFileObject $snapshot of the process diagram (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentBusinessModelDiagramsCreateAsyncWithHttpInfo($xml, $businessModelId, $snapshot = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelDiagramResponse';
        $request = $this->postEnvironmentBusinessModelDiagramsCreateRequest($xml, $businessModelId, $snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentBusinessModelDiagramsCreate'
     *
     * @param  string $xml  (required)
     * @param  string $businessModelId  (required)
     * @param  \SplFileObject $snapshot of the process diagram (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentBusinessModelDiagramsCreateRequest($xml, $businessModelId, $snapshot = null)
    {
        // verify the required parameter 'xml' is set
        if ($xml === null || (is_array($xml) && count($xml) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xml when calling postEnvironmentBusinessModelDiagramsCreate'
            );
        }
        // verify the required parameter 'businessModelId' is set
        if ($businessModelId === null || (is_array($businessModelId) && count($businessModelId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $businessModelId when calling postEnvironmentBusinessModelDiagramsCreate'
            );
        }

        $resourcePath = '/api/v2/environment/business-model-diagrams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($xml !== null) {
            $formParams['xml'] = ObjectSerializer::toFormValue($xml);
        }
        // form params
        if ($businessModelId !== null) {
            $formParams['business_model_id'] = ObjectSerializer::toFormValue($businessModelId);
        }
        // form params
        if ($snapshot !== null) {
            $multipart = true;
            $formParams['snapshot'] = [];
            $paramFiles = is_array($snapshot) ? $snapshot : [$snapshot];
            foreach ($paramFiles as $paramFile) {
                $formParams['snapshot'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentBusinessModelDiagramsPublish
     *
     * Publish Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelDiagramsPublishRequest $postBusinessModelDiagramsPublishRequest postBusinessModelDiagramsPublishRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\PublishBusinessModelDiagramResponse
     */
    public function postEnvironmentBusinessModelDiagramsPublish($diagramId, $postBusinessModelDiagramsPublishRequest = null)
    {
        list($response) = $this->postEnvironmentBusinessModelDiagramsPublishWithHttpInfo($diagramId, $postBusinessModelDiagramsPublishRequest);
        return $response;
    }

    /**
     * Operation postEnvironmentBusinessModelDiagramsPublishWithHttpInfo
     *
     * Publish Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelDiagramsPublishRequest $postBusinessModelDiagramsPublishRequest (optional)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\PublishBusinessModelDiagramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentBusinessModelDiagramsPublishWithHttpInfo($diagramId, $postBusinessModelDiagramsPublishRequest = null)
    {
        $request = $this->postEnvironmentBusinessModelDiagramsPublishRequest($diagramId, $postBusinessModelDiagramsPublishRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\PublishBusinessModelDiagramResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\PublishBusinessModelDiagramResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\PublishBusinessModelDiagramResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\PublishBusinessModelDiagramResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\PublishBusinessModelDiagramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentBusinessModelDiagramsPublishAsync
     *
     * Publish Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelDiagramsPublishRequest $postBusinessModelDiagramsPublishRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentBusinessModelDiagramsPublishAsync($diagramId, $postBusinessModelDiagramsPublishRequest = null)
    {
        return $this->postEnvironmentBusinessModelDiagramsPublishAsyncWithHttpInfo($diagramId, $postBusinessModelDiagramsPublishRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentBusinessModelDiagramsPublishAsyncWithHttpInfo
     *
     * Publish Business Model Diagram
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelDiagramsPublishRequest $postBusinessModelDiagramsPublishRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentBusinessModelDiagramsPublishAsyncWithHttpInfo($diagramId, $postBusinessModelDiagramsPublishRequest = null)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\PublishBusinessModelDiagramResponse';
        $request = $this->postEnvironmentBusinessModelDiagramsPublishRequest($diagramId, $postBusinessModelDiagramsPublishRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentBusinessModelDiagramsPublish'
     *
     * @param  string $diagramId The ID of the diagram. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostBusinessModelDiagramsPublishRequest $postBusinessModelDiagramsPublishRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentBusinessModelDiagramsPublishRequest($diagramId, $postBusinessModelDiagramsPublishRequest = null)
    {
        // verify the required parameter 'diagramId' is set
        if ($diagramId === null || (is_array($diagramId) && count($diagramId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diagramId when calling postEnvironmentBusinessModelDiagramsPublish'
            );
        }

        $resourcePath = '/api/v2/environment/business-model-diagrams/{diagram_id}/publish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($diagramId !== null) {
            $resourcePath = str_replace(
                '{' . 'diagram_id' . '}',
                ObjectSerializer::toPathValue($diagramId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postBusinessModelDiagramsPublishRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postBusinessModelDiagramsPublishRequest));
            } else {
                $httpBody = $postBusinessModelDiagramsPublishRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentBusinessModelsCreate
     *
     * Create Business Model
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentBusinessModelsCreateRequest $postEnvironmentBusinessModelsCreateRequest postEnvironmentBusinessModelsCreateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\CreateBusinessModelResponse
     */
    public function postEnvironmentBusinessModelsCreate($postEnvironmentBusinessModelsCreateRequest)
    {
        list($response) = $this->postEnvironmentBusinessModelsCreateWithHttpInfo($postEnvironmentBusinessModelsCreateRequest);
        return $response;
    }

    /**
     * Operation postEnvironmentBusinessModelsCreateWithHttpInfo
     *
     * Create Business Model
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentBusinessModelsCreateRequest $postEnvironmentBusinessModelsCreateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\CreateBusinessModelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentBusinessModelsCreateWithHttpInfo($postEnvironmentBusinessModelsCreateRequest)
    {
        $request = $this->postEnvironmentBusinessModelsCreateRequest($postEnvironmentBusinessModelsCreateRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\CreateBusinessModelResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\CreateBusinessModelResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentBusinessModelsCreateAsync
     *
     * Create Business Model
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentBusinessModelsCreateRequest $postEnvironmentBusinessModelsCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentBusinessModelsCreateAsync($postEnvironmentBusinessModelsCreateRequest)
    {
        return $this->postEnvironmentBusinessModelsCreateAsyncWithHttpInfo($postEnvironmentBusinessModelsCreateRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentBusinessModelsCreateAsyncWithHttpInfo
     *
     * Create Business Model
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentBusinessModelsCreateRequest $postEnvironmentBusinessModelsCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentBusinessModelsCreateAsyncWithHttpInfo($postEnvironmentBusinessModelsCreateRequest)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\CreateBusinessModelResponse';
        $request = $this->postEnvironmentBusinessModelsCreateRequest($postEnvironmentBusinessModelsCreateRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentBusinessModelsCreate'
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentBusinessModelsCreateRequest $postEnvironmentBusinessModelsCreateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentBusinessModelsCreateRequest($postEnvironmentBusinessModelsCreateRequest)
    {
        // verify the required parameter 'postEnvironmentBusinessModelsCreateRequest' is set
        if ($postEnvironmentBusinessModelsCreateRequest === null || (is_array($postEnvironmentBusinessModelsCreateRequest) && count($postEnvironmentBusinessModelsCreateRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postEnvironmentBusinessModelsCreateRequest when calling postEnvironmentBusinessModelsCreate'
            );
        }

        $resourcePath = '/api/v2/environment/business-models';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postEnvironmentBusinessModelsCreateRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postEnvironmentBusinessModelsCreateRequest));
            } else {
                $httpBody = $postEnvironmentBusinessModelsCreateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentEventsMessage
     *
     * Send Message
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentEventsMessageRequest $postEnvironmentEventsMessageRequest postEnvironmentEventsMessageRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\SendMessageResponse
     */
    public function postEnvironmentEventsMessage($postEnvironmentEventsMessageRequest)
    {
        list($response) = $this->postEnvironmentEventsMessageWithHttpInfo($postEnvironmentEventsMessageRequest);
        return $response;
    }

    /**
     * Operation postEnvironmentEventsMessageWithHttpInfo
     *
     * Send Message
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentEventsMessageRequest $postEnvironmentEventsMessageRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\SendMessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentEventsMessageWithHttpInfo($postEnvironmentEventsMessageRequest)
    {
        $request = $this->postEnvironmentEventsMessageRequest($postEnvironmentEventsMessageRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\SendMessageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\SendMessageResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\SendMessageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\SendMessageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\SendMessageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentEventsMessageAsync
     *
     * Send Message
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentEventsMessageRequest $postEnvironmentEventsMessageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentEventsMessageAsync($postEnvironmentEventsMessageRequest)
    {
        return $this->postEnvironmentEventsMessageAsyncWithHttpInfo($postEnvironmentEventsMessageRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentEventsMessageAsyncWithHttpInfo
     *
     * Send Message
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentEventsMessageRequest $postEnvironmentEventsMessageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentEventsMessageAsyncWithHttpInfo($postEnvironmentEventsMessageRequest)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\SendMessageResponse';
        $request = $this->postEnvironmentEventsMessageRequest($postEnvironmentEventsMessageRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentEventsMessage'
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentEventsMessageRequest $postEnvironmentEventsMessageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentEventsMessageRequest($postEnvironmentEventsMessageRequest)
    {
        // verify the required parameter 'postEnvironmentEventsMessageRequest' is set
        if ($postEnvironmentEventsMessageRequest === null || (is_array($postEnvironmentEventsMessageRequest) && count($postEnvironmentEventsMessageRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postEnvironmentEventsMessageRequest when calling postEnvironmentEventsMessage'
            );
        }

        $resourcePath = '/api/v2/environment/events/message';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postEnvironmentEventsMessageRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postEnvironmentEventsMessageRequest));
            } else {
                $httpBody = $postEnvironmentEventsMessageRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentEventsSignal
     *
     * Send Message
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentEventsSignalRequest $postEnvironmentEventsSignalRequest postEnvironmentEventsSignalRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\SendMessageResponse
     */
    public function postEnvironmentEventsSignal($postEnvironmentEventsSignalRequest)
    {
        list($response) = $this->postEnvironmentEventsSignalWithHttpInfo($postEnvironmentEventsSignalRequest);
        return $response;
    }

    /**
     * Operation postEnvironmentEventsSignalWithHttpInfo
     *
     * Send Message
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentEventsSignalRequest $postEnvironmentEventsSignalRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\SendMessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentEventsSignalWithHttpInfo($postEnvironmentEventsSignalRequest)
    {
        $request = $this->postEnvironmentEventsSignalRequest($postEnvironmentEventsSignalRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\SendMessageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\SendMessageResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\SendMessageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\SendMessageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\SendMessageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentEventsSignalAsync
     *
     * Send Message
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentEventsSignalRequest $postEnvironmentEventsSignalRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentEventsSignalAsync($postEnvironmentEventsSignalRequest)
    {
        return $this->postEnvironmentEventsSignalAsyncWithHttpInfo($postEnvironmentEventsSignalRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentEventsSignalAsyncWithHttpInfo
     *
     * Send Message
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentEventsSignalRequest $postEnvironmentEventsSignalRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentEventsSignalAsyncWithHttpInfo($postEnvironmentEventsSignalRequest)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\SendMessageResponse';
        $request = $this->postEnvironmentEventsSignalRequest($postEnvironmentEventsSignalRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentEventsSignal'
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentEventsSignalRequest $postEnvironmentEventsSignalRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentEventsSignalRequest($postEnvironmentEventsSignalRequest)
    {
        // verify the required parameter 'postEnvironmentEventsSignalRequest' is set
        if ($postEnvironmentEventsSignalRequest === null || (is_array($postEnvironmentEventsSignalRequest) && count($postEnvironmentEventsSignalRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postEnvironmentEventsSignalRequest when calling postEnvironmentEventsSignal'
            );
        }

        $resourcePath = '/api/v2/environment/events/signal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postEnvironmentEventsSignalRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postEnvironmentEventsSignalRequest));
            } else {
                $httpBody = $postEnvironmentEventsSignalRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentServiceTasksLock
     *
     * Lock Service Tasks
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentServiceTasksLockRequest $postEnvironmentServiceTasksLockRequest postEnvironmentServiceTasksLockRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\LockServiceTasksResponse
     */
    public function postEnvironmentServiceTasksLock($postEnvironmentServiceTasksLockRequest)
    {
        list($response) = $this->postEnvironmentServiceTasksLockWithHttpInfo($postEnvironmentServiceTasksLockRequest);
        return $response;
    }

    /**
     * Operation postEnvironmentServiceTasksLockWithHttpInfo
     *
     * Lock Service Tasks
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentServiceTasksLockRequest $postEnvironmentServiceTasksLockRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\LockServiceTasksResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentServiceTasksLockWithHttpInfo($postEnvironmentServiceTasksLockRequest)
    {
        $request = $this->postEnvironmentServiceTasksLockRequest($postEnvironmentServiceTasksLockRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\LockServiceTasksResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\LockServiceTasksResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\LockServiceTasksResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\LockServiceTasksResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\LockServiceTasksResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentServiceTasksLockAsync
     *
     * Lock Service Tasks
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentServiceTasksLockRequest $postEnvironmentServiceTasksLockRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentServiceTasksLockAsync($postEnvironmentServiceTasksLockRequest)
    {
        return $this->postEnvironmentServiceTasksLockAsyncWithHttpInfo($postEnvironmentServiceTasksLockRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentServiceTasksLockAsyncWithHttpInfo
     *
     * Lock Service Tasks
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentServiceTasksLockRequest $postEnvironmentServiceTasksLockRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentServiceTasksLockAsyncWithHttpInfo($postEnvironmentServiceTasksLockRequest)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\LockServiceTasksResponse';
        $request = $this->postEnvironmentServiceTasksLockRequest($postEnvironmentServiceTasksLockRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentServiceTasksLock'
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentServiceTasksLockRequest $postEnvironmentServiceTasksLockRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentServiceTasksLockRequest($postEnvironmentServiceTasksLockRequest)
    {
        // verify the required parameter 'postEnvironmentServiceTasksLockRequest' is set
        if ($postEnvironmentServiceTasksLockRequest === null || (is_array($postEnvironmentServiceTasksLockRequest) && count($postEnvironmentServiceTasksLockRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postEnvironmentServiceTasksLockRequest when calling postEnvironmentServiceTasksLock'
            );
        }

        $resourcePath = '/api/v2/environment/service-tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postEnvironmentServiceTasksLockRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postEnvironmentServiceTasksLockRequest));
            } else {
                $httpBody = $postEnvironmentServiceTasksLockRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentServiceTasksServe
     *
     * Serve Service Task
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentServiceTasksServeRequest $postEnvironmentServiceTasksServeRequest postEnvironmentServiceTasksServeRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\ServeServiceTaskResponse
     */
    public function postEnvironmentServiceTasksServe($reference, $postEnvironmentServiceTasksServeRequest)
    {
        list($response) = $this->postEnvironmentServiceTasksServeWithHttpInfo($reference, $postEnvironmentServiceTasksServeRequest);
        return $response;
    }

    /**
     * Operation postEnvironmentServiceTasksServeWithHttpInfo
     *
     * Serve Service Task
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentServiceTasksServeRequest $postEnvironmentServiceTasksServeRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\ServeServiceTaskResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentServiceTasksServeWithHttpInfo($reference, $postEnvironmentServiceTasksServeRequest)
    {
        $request = $this->postEnvironmentServiceTasksServeRequest($reference, $postEnvironmentServiceTasksServeRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\ServeServiceTaskResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\ServeServiceTaskResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\ServeServiceTaskResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\ServeServiceTaskResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\ServeServiceTaskResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentServiceTasksServeAsync
     *
     * Serve Service Task
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentServiceTasksServeRequest $postEnvironmentServiceTasksServeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentServiceTasksServeAsync($reference, $postEnvironmentServiceTasksServeRequest)
    {
        return $this->postEnvironmentServiceTasksServeAsyncWithHttpInfo($reference, $postEnvironmentServiceTasksServeRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentServiceTasksServeAsyncWithHttpInfo
     *
     * Serve Service Task
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentServiceTasksServeRequest $postEnvironmentServiceTasksServeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentServiceTasksServeAsyncWithHttpInfo($reference, $postEnvironmentServiceTasksServeRequest)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\ServeServiceTaskResponse';
        $request = $this->postEnvironmentServiceTasksServeRequest($reference, $postEnvironmentServiceTasksServeRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentServiceTasksServe'
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentServiceTasksServeRequest $postEnvironmentServiceTasksServeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentServiceTasksServeRequest($reference, $postEnvironmentServiceTasksServeRequest)
    {
        // verify the required parameter 'reference' is set
        if ($reference === null || (is_array($reference) && count($reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference when calling postEnvironmentServiceTasksServe'
            );
        }
        // verify the required parameter 'postEnvironmentServiceTasksServeRequest' is set
        if ($postEnvironmentServiceTasksServeRequest === null || (is_array($postEnvironmentServiceTasksServeRequest) && count($postEnvironmentServiceTasksServeRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postEnvironmentServiceTasksServeRequest when calling postEnvironmentServiceTasksServe'
            );
        }

        $resourcePath = '/api/v2/environment/service-tasks/{reference}/serve';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                '{' . 'reference' . '}',
                ObjectSerializer::toPathValue($reference),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postEnvironmentServiceTasksServeRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postEnvironmentServiceTasksServeRequest));
            } else {
                $httpBody = $postEnvironmentServiceTasksServeRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentServiceTasksUnlock
     *
     * Unlock Service Task
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentServiceTasksUnlockRequest $postEnvironmentServiceTasksUnlockRequest postEnvironmentServiceTasksUnlockRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\UnlockServiceTaskResponse
     */
    public function postEnvironmentServiceTasksUnlock($reference, $postEnvironmentServiceTasksUnlockRequest)
    {
        list($response) = $this->postEnvironmentServiceTasksUnlockWithHttpInfo($reference, $postEnvironmentServiceTasksUnlockRequest);
        return $response;
    }

    /**
     * Operation postEnvironmentServiceTasksUnlockWithHttpInfo
     *
     * Unlock Service Task
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentServiceTasksUnlockRequest $postEnvironmentServiceTasksUnlockRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\UnlockServiceTaskResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentServiceTasksUnlockWithHttpInfo($reference, $postEnvironmentServiceTasksUnlockRequest)
    {
        $request = $this->postEnvironmentServiceTasksUnlockRequest($reference, $postEnvironmentServiceTasksUnlockRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\UnlockServiceTaskResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\UnlockServiceTaskResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\UnlockServiceTaskResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\UnlockServiceTaskResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\UnlockServiceTaskResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentServiceTasksUnlockAsync
     *
     * Unlock Service Task
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentServiceTasksUnlockRequest $postEnvironmentServiceTasksUnlockRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentServiceTasksUnlockAsync($reference, $postEnvironmentServiceTasksUnlockRequest)
    {
        return $this->postEnvironmentServiceTasksUnlockAsyncWithHttpInfo($reference, $postEnvironmentServiceTasksUnlockRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentServiceTasksUnlockAsyncWithHttpInfo
     *
     * Unlock Service Task
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentServiceTasksUnlockRequest $postEnvironmentServiceTasksUnlockRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentServiceTasksUnlockAsyncWithHttpInfo($reference, $postEnvironmentServiceTasksUnlockRequest)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\UnlockServiceTaskResponse';
        $request = $this->postEnvironmentServiceTasksUnlockRequest($reference, $postEnvironmentServiceTasksUnlockRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentServiceTasksUnlock'
     *
     * @param  string $reference The reference of a service task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentServiceTasksUnlockRequest $postEnvironmentServiceTasksUnlockRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentServiceTasksUnlockRequest($reference, $postEnvironmentServiceTasksUnlockRequest)
    {
        // verify the required parameter 'reference' is set
        if ($reference === null || (is_array($reference) && count($reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference when calling postEnvironmentServiceTasksUnlock'
            );
        }
        // verify the required parameter 'postEnvironmentServiceTasksUnlockRequest' is set
        if ($postEnvironmentServiceTasksUnlockRequest === null || (is_array($postEnvironmentServiceTasksUnlockRequest) && count($postEnvironmentServiceTasksUnlockRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postEnvironmentServiceTasksUnlockRequest when calling postEnvironmentServiceTasksUnlock'
            );
        }

        $resourcePath = '/api/v2/environment/service-tasks/{reference}/unlock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                '{' . 'reference' . '}',
                ObjectSerializer::toPathValue($reference),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postEnvironmentServiceTasksUnlockRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postEnvironmentServiceTasksUnlockRequest));
            } else {
                $httpBody = $postEnvironmentServiceTasksUnlockRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentTaggedBusinessModelsStart
     *
     * Starts Business Process Models by Tag
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentTaggedBusinessModelsStartRequest $postEnvironmentTaggedBusinessModelsStartRequest postEnvironmentTaggedBusinessModelsStartRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\StartsBusinessProcessModelsByTagResponse
     */
    public function postEnvironmentTaggedBusinessModelsStart($postEnvironmentTaggedBusinessModelsStartRequest)
    {
        list($response) = $this->postEnvironmentTaggedBusinessModelsStartWithHttpInfo($postEnvironmentTaggedBusinessModelsStartRequest);
        return $response;
    }

    /**
     * Operation postEnvironmentTaggedBusinessModelsStartWithHttpInfo
     *
     * Starts Business Process Models by Tag
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentTaggedBusinessModelsStartRequest $postEnvironmentTaggedBusinessModelsStartRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\StartsBusinessProcessModelsByTagResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentTaggedBusinessModelsStartWithHttpInfo($postEnvironmentTaggedBusinessModelsStartRequest)
    {
        $request = $this->postEnvironmentTaggedBusinessModelsStartRequest($postEnvironmentTaggedBusinessModelsStartRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\StartsBusinessProcessModelsByTagResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\StartsBusinessProcessModelsByTagResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\StartsBusinessProcessModelsByTagResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\StartsBusinessProcessModelsByTagResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\StartsBusinessProcessModelsByTagResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentTaggedBusinessModelsStartAsync
     *
     * Starts Business Process Models by Tag
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentTaggedBusinessModelsStartRequest $postEnvironmentTaggedBusinessModelsStartRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentTaggedBusinessModelsStartAsync($postEnvironmentTaggedBusinessModelsStartRequest)
    {
        return $this->postEnvironmentTaggedBusinessModelsStartAsyncWithHttpInfo($postEnvironmentTaggedBusinessModelsStartRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentTaggedBusinessModelsStartAsyncWithHttpInfo
     *
     * Starts Business Process Models by Tag
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentTaggedBusinessModelsStartRequest $postEnvironmentTaggedBusinessModelsStartRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentTaggedBusinessModelsStartAsyncWithHttpInfo($postEnvironmentTaggedBusinessModelsStartRequest)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\StartsBusinessProcessModelsByTagResponse';
        $request = $this->postEnvironmentTaggedBusinessModelsStartRequest($postEnvironmentTaggedBusinessModelsStartRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentTaggedBusinessModelsStart'
     *
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentTaggedBusinessModelsStartRequest $postEnvironmentTaggedBusinessModelsStartRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentTaggedBusinessModelsStartRequest($postEnvironmentTaggedBusinessModelsStartRequest)
    {
        // verify the required parameter 'postEnvironmentTaggedBusinessModelsStartRequest' is set
        if ($postEnvironmentTaggedBusinessModelsStartRequest === null || (is_array($postEnvironmentTaggedBusinessModelsStartRequest) && count($postEnvironmentTaggedBusinessModelsStartRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postEnvironmentTaggedBusinessModelsStartRequest when calling postEnvironmentTaggedBusinessModelsStart'
            );
        }

        $resourcePath = '/api/v2/environment/tagged/business-process-models';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postEnvironmentTaggedBusinessModelsStartRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postEnvironmentTaggedBusinessModelsStartRequest));
            } else {
                $httpBody = $postEnvironmentTaggedBusinessModelsStartRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentUserTasksComplete
     *
     * Complete User Task
     *
     * @param  string $id The id of the task. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\CompleteUserTaskResponse
     */
    public function postEnvironmentUserTasksComplete($id)
    {
        list($response) = $this->postEnvironmentUserTasksCompleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation postEnvironmentUserTasksCompleteWithHttpInfo
     *
     * Complete User Task
     *
     * @param  string $id The id of the task. (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\CompleteUserTaskResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentUserTasksCompleteWithHttpInfo($id)
    {
        $request = $this->postEnvironmentUserTasksCompleteRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\CompleteUserTaskResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\CompleteUserTaskResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\CompleteUserTaskResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\CompleteUserTaskResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\CompleteUserTaskResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentUserTasksCompleteAsync
     *
     * Complete User Task
     *
     * @param  string $id The id of the task. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentUserTasksCompleteAsync($id)
    {
        return $this->postEnvironmentUserTasksCompleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentUserTasksCompleteAsyncWithHttpInfo
     *
     * Complete User Task
     *
     * @param  string $id The id of the task. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentUserTasksCompleteAsyncWithHttpInfo($id)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\CompleteUserTaskResponse';
        $request = $this->postEnvironmentUserTasksCompleteRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentUserTasksComplete'
     *
     * @param  string $id The id of the task. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentUserTasksCompleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling postEnvironmentUserTasksComplete'
            );
        }

        $resourcePath = '/api/v2/environment/user-tasks/{id}/complete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentUserTasksErrorize
     *
     * Errorize User Task
     *
     * @param  string $id The id of the task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentUserTasksErrorizeRequest $postEnvironmentUserTasksErrorizeRequest postEnvironmentUserTasksErrorizeRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postEnvironmentUserTasksErrorize($id, $postEnvironmentUserTasksErrorizeRequest)
    {
        $this->postEnvironmentUserTasksErrorizeWithHttpInfo($id, $postEnvironmentUserTasksErrorizeRequest);
    }

    /**
     * Operation postEnvironmentUserTasksErrorizeWithHttpInfo
     *
     * Errorize User Task
     *
     * @param  string $id The id of the task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentUserTasksErrorizeRequest $postEnvironmentUserTasksErrorizeRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentUserTasksErrorizeWithHttpInfo($id, $postEnvironmentUserTasksErrorizeRequest)
    {
        $request = $this->postEnvironmentUserTasksErrorizeRequest($id, $postEnvironmentUserTasksErrorizeRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentUserTasksErrorizeAsync
     *
     * Errorize User Task
     *
     * @param  string $id The id of the task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentUserTasksErrorizeRequest $postEnvironmentUserTasksErrorizeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentUserTasksErrorizeAsync($id, $postEnvironmentUserTasksErrorizeRequest)
    {
        return $this->postEnvironmentUserTasksErrorizeAsyncWithHttpInfo($id, $postEnvironmentUserTasksErrorizeRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentUserTasksErrorizeAsyncWithHttpInfo
     *
     * Errorize User Task
     *
     * @param  string $id The id of the task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentUserTasksErrorizeRequest $postEnvironmentUserTasksErrorizeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentUserTasksErrorizeAsyncWithHttpInfo($id, $postEnvironmentUserTasksErrorizeRequest)
    {
        $returnType = '';
        $request = $this->postEnvironmentUserTasksErrorizeRequest($id, $postEnvironmentUserTasksErrorizeRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentUserTasksErrorize'
     *
     * @param  string $id The id of the task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentUserTasksErrorizeRequest $postEnvironmentUserTasksErrorizeRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentUserTasksErrorizeRequest($id, $postEnvironmentUserTasksErrorizeRequest)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling postEnvironmentUserTasksErrorize'
            );
        }
        // verify the required parameter 'postEnvironmentUserTasksErrorizeRequest' is set
        if ($postEnvironmentUserTasksErrorizeRequest === null || (is_array($postEnvironmentUserTasksErrorizeRequest) && count($postEnvironmentUserTasksErrorizeRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postEnvironmentUserTasksErrorizeRequest when calling postEnvironmentUserTasksErrorize'
            );
        }

        $resourcePath = '/api/v2/environment/user-tasks/{id}/errorize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postEnvironmentUserTasksErrorizeRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postEnvironmentUserTasksErrorizeRequest));
            } else {
                $httpBody = $postEnvironmentUserTasksErrorizeRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentUserTasksEscalate
     *
     * Escalate User Task
     *
     * @param  string $id The id of the task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentUserTasksEscalateRequest $postEnvironmentUserTasksEscalateRequest postEnvironmentUserTasksEscalateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stackflows\Clients\Stackflows\Model\EscalateUserTaskResponse
     */
    public function postEnvironmentUserTasksEscalate($id, $postEnvironmentUserTasksEscalateRequest)
    {
        list($response) = $this->postEnvironmentUserTasksEscalateWithHttpInfo($id, $postEnvironmentUserTasksEscalateRequest);
        return $response;
    }

    /**
     * Operation postEnvironmentUserTasksEscalateWithHttpInfo
     *
     * Escalate User Task
     *
     * @param  string $id The id of the task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentUserTasksEscalateRequest $postEnvironmentUserTasksEscalateRequest (required)
     *
     * @throws \Stackflows\Clients\Stackflows\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stackflows\Clients\Stackflows\Model\EscalateUserTaskResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentUserTasksEscalateWithHttpInfo($id, $postEnvironmentUserTasksEscalateRequest)
    {
        $request = $this->postEnvironmentUserTasksEscalateRequest($id, $postEnvironmentUserTasksEscalateRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stackflows\Clients\Stackflows\Model\EscalateUserTaskResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stackflows\Clients\Stackflows\Model\EscalateUserTaskResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stackflows\Clients\Stackflows\Model\EscalateUserTaskResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stackflows\Clients\Stackflows\Model\EscalateUserTaskResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stackflows\Clients\Stackflows\Model\EscalateUserTaskResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentUserTasksEscalateAsync
     *
     * Escalate User Task
     *
     * @param  string $id The id of the task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentUserTasksEscalateRequest $postEnvironmentUserTasksEscalateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentUserTasksEscalateAsync($id, $postEnvironmentUserTasksEscalateRequest)
    {
        return $this->postEnvironmentUserTasksEscalateAsyncWithHttpInfo($id, $postEnvironmentUserTasksEscalateRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentUserTasksEscalateAsyncWithHttpInfo
     *
     * Escalate User Task
     *
     * @param  string $id The id of the task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentUserTasksEscalateRequest $postEnvironmentUserTasksEscalateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentUserTasksEscalateAsyncWithHttpInfo($id, $postEnvironmentUserTasksEscalateRequest)
    {
        $returnType = '\Stackflows\Clients\Stackflows\Model\EscalateUserTaskResponse';
        $request = $this->postEnvironmentUserTasksEscalateRequest($id, $postEnvironmentUserTasksEscalateRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentUserTasksEscalate'
     *
     * @param  string $id The id of the task. (required)
     * @param  \Stackflows\Clients\Stackflows\Model\PostEnvironmentUserTasksEscalateRequest $postEnvironmentUserTasksEscalateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentUserTasksEscalateRequest($id, $postEnvironmentUserTasksEscalateRequest)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling postEnvironmentUserTasksEscalate'
            );
        }
        // verify the required parameter 'postEnvironmentUserTasksEscalateRequest' is set
        if ($postEnvironmentUserTasksEscalateRequest === null || (is_array($postEnvironmentUserTasksEscalateRequest) && count($postEnvironmentUserTasksEscalateRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postEnvironmentUserTasksEscalateRequest when calling postEnvironmentUserTasksEscalate'
            );
        }

        $resourcePath = '/api/v2/environment/user-tasks/{id}/escalate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postEnvironmentUserTasksEscalateRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postEnvironmentUserTasksEscalateRequest));
            } else {
                $httpBody = $postEnvironmentUserTasksEscalateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
